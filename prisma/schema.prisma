// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chaintype {
  id         String   @id @default(uuid())
  symbol     String?
  chain      String?
  wallettype String?
  isactive   Boolean?
  createdat  String?
}

model cubistconfig {
  id                  String   @id @default(uuid())
  tenantid            String?
  tenant              tenant?  @relation(fields: [tenantid], references: [id])
  orgid               String
  isactive            Boolean?
  createdat           String?
  updatedat           String?
  signersecretname    String
  gaspayersecretname  String
  sendtokensecretname String?
}

model organization {
  id                String            @id @default(uuid())
  name              String
  description       String
  tenantid          String?
  tenant            tenant?            @relation(fields: [tenantid], references: [id])
  isactive          Boolean
  createdat         String
  adminusers        adminuser[]
  projects          project[]
}

model project {
  id                String             @id @default(uuid())
  name              String
  description       String
  projecttype       ProjectType
  projectstatus     ProjectStatusEnum
  projectstage      ProjectStage
  projectmetadata   projectdataitem[]
  knowledgebaseid   String
  organization      organization @relation(fields: [organizationid], references: [id])
  organizationid    String
  tenantid          String
  tenant            tenant @relation(fields: [tenantid], references: [id])
  isactive          Boolean
  createdat         String
  createdby         String
  adminUsers        adminuser[]
  references        reference[]
}

enum ProjectType {
  ON_PREM
  HYBRID
  CLOUD
  CUSTOM_CLOUD
}

enum ReferenceStage {
  DATA_SELECTION
  DATA_INGESTION
  DATA_STORAGE
}

enum ProjectStatusEnum {
  STARTED
  PAUSED
  CANCELLED
  ACTIVE
}

enum ProjectStage {
  DATA_SELECTION
  DATA_INGESTION
  DATA_STORAGE
  DATA_PREPARATION
  LLM_FINE_TUNING
  VERSIONING
  RAG
  PUBLISHED
}

model projectdataitem {
  id              String          @id @default(uuid())
  projectid       String
  project         project         @relation(fields: [projectid], references: [id])
  name            String
  value           String
  createdat       String
}



model reference  {
  id                String             @id @default(uuid())
  tenantid          String
  tenant            tenant            @relation(fields: [tenantid], references: [id])
  projectid         String?
  project           project?            @relation(fields: [projectid], references: [id])
  referencestage    ReferenceStage
  name              String?            
  reftype           String?
  url               String? 
  size              String?
  depth             Int?
  ingested          Boolean  
  isdeleted         Boolean          @default(false)    
  isactive          Boolean
  createdat         String?
  datasourceid      String?
  ingestionjobid    String?
  s3prestorehash    String?
  s3prestoretxhash  String?
  s3poststorehash   String?
  s3poststoretxhash String?
  chaintype         String?
  chainid           String?
    

}

model customer {
  id                String             @id @default(uuid())
  tenantuserid      String?
  tenantid          String?
  tenant            tenant?            @relation(fields: [tenantid], references: [id])
  emailid           String?
  name              String?
  cubistuserid      String?
  isactive          Boolean?
  createdat         String?
  updatedat         String?
  iss               String?
  isbonuscredit     Boolean?
  usertype          String?
  partialtoken      String?
  customerkycs      customerkyc[]
  wallets           wallet[]
  transactions      transaction[]
  staketransactions staketransaction[]
  stakeaccounts     stakeaccount[]
  wishlists         productwishlist[]
  sellerorders      orders[]            @relation("SellerOrders")
  buyerorders       orders[]            @relation("BuyerOrders")
  productreviews    productreview[]
  collections       productcollection[] 
  productownerships productownership[]
}

model adminuser {
  id                String             @id @default(uuid())
  tenantuserid      String?
  tenantid          String?
  tenant            tenant?            @relation(fields: [tenantid], references: [id])
  emailid           String?
  name              String?
  cubistuserid      String?
  isactive          Boolean?
  createdat         String?
  iss               String?
  organizationid    String?
  organization      organization? @relation(fields: [organizationid], references: [id])
  isbonuscredit     Boolean?
  adminwallets      adminwallet[]
  admintransactions admintransaction[]
  projects          project[]
}

model customerkyc {
  id         String    @id @default(uuid())
  customerid String?
  customer   customer? @relation(fields: [customerid], references: [id])
  kyctype    String?
  type       String?
  kycid      String?
  status     String?
  error      String?
  tenantid   String?
  tenant     tenant?   @relation(fields: [tenantid], references: [id])
  isactive   Boolean?
  createdat  String?
  updatedat  String?
}

model gaspayerwallet {
  id             String   @id @default(uuid())
  tenantid       String?
  tenant         tenant?  @relation(fields: [tenantid], references: [id])
  walletaddress  String?
  symbol         String?
  walletid       String?
  wallettype     String?
  iscubistwallet Boolean?
  cubistuserid   String?
  isgaspayer     Boolean?
  isactive       Boolean?
  createdat      String?
  publickey      String?
}

model masterwallet {
  id             String   @id @default(uuid())
  tenantid       String?
  purpose        String?
  walletaddress  String?
  symbol         String?
  walletid       String?
  wallettype     String?
  iscubistwallet Boolean?
  cubistuserid   String?
  isactive       Boolean?
  createdat      String?
  chaintype      String?
}

model stakeaccount {
  id                        String             @id @default(uuid())
  customerid                String?
  walletaddress             String
  validatornodeaddress      String?
  chaintype                 String?
  symbol                    String
  amount                    Float?
  status                    String?
  network                   String?
  tokenid                   String
  tenantid                  String
  tenantuserid              String
  tenanttransactionid       String
  stakeaccountpubkey        String
  lockupexpirationtimestamp Int?
  isactive                  Boolean?
  createdat                 String?
  updatedat                 String?
  error                     String?
  customer                  customer?          @relation(fields: [customerid], references: [id])
  tenant                    tenant?            @relation(fields: [tenantid], references: [id])
  staketransaction          staketransaction[]
}

model staketransaction {
  id                    String        @id @default(uuid())
  customerid            String?
  type                  String?
  tokenid               String
  tenanttransactionid   String
  stakeaccountpubkey    String
  network               String?
  status                String?
  callbackstatus        String?
  error                 String?
  tenantuserid          String?
  walletaddress         String?
  receiverwalletaddress String?
  chaintype             String?
  amount                Float?
  symbol                String?
  txhash                String
  tenantid              String
  isactive              Boolean?
  stakeaccountid        String?
  createdat             DateTime?     @default(now())
  updatedat             DateTime?     @updatedAt
  customer              customer?     @relation(fields: [customerid], references: [id])
  token                 token?        @relation(fields: [tokenid], references: [id])
  stakeaccount          stakeaccount? @relation(fields: [stakeaccountid], references: [id])
  tenant                tenant?       @relation(fields: [tenantid], references: [id])
}

model sumsubconfig {
  id                String   @id @default(uuid())
  tenantid          String?
  baseurl           String?
  sumsub_app_token  String
  sumsub_secret_key String
  ismaster          Boolean
  isactive          Boolean?
  createdat         String?
  updatedat         String?
}

model tenant {
  id               String             @id @default(uuid())
  name             String?
  apikey           String?
  logo             String?
  isactive         Boolean?
  createdat        String?
  tenantsecret     String?
  tenantheaderkey  String?
  callbackurl      String?
  cubistorgid      String?
  userpoolid       String?
  cognitoclientid  String?
  iscognitoactive  Boolean?
  iscubistactive  Boolean?
  cubistconfig     cubistconfig[]
  customer         customer[]
  adminuser        adminuser[]
  customerkyc      customerkyc[]
  gaspayerwallet   gaspayerwallet[]
  stakeaccount     stakeaccount[]
  staketransaction staketransaction[]
  categories       productcategory[]
  products         product[]
  references       reference[]   
  organizations    organization[]
  projects         project[]
}

enum productrarity {
  NORMAL
  RARE
  EPIC
  LEGENDARY
  MYTHICAL
}


model productcategory {
  id        String    @id @default(uuid())
  name      String
  tenantid  String
  tenant    tenant    @relation(fields: [tenantid], references: [id])
  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt
  products  product[]

  @@unique([tenantid, name])
}

model product {
  id                  String                      @id @default(uuid())
  name                String
  description         String
  type                String
  sku                 String
  categoryid          String
  category            productcategory             @relation(fields: [categoryid], references: [id])
  rarity              productrarity?              @default(NORMAL)
  price               Float?
  tenantid            String?
  tenant              tenant?                     @relation(fields: [tenantid], references: [id])
  status              ProductStatus?              @default(ACTIVE)
  isdeleted           Boolean?
  createdat           DateTime?                   @default(now())
  updatedat           DateTime?                   @updatedAt
  transactions        transaction[]
  productattributes   productattribute[]
  wishlists           productwishlist[]
  orders              orders[]
  productreviews      productreview[]
  collections         productcollectionproducts[] @relation("productcollectionproductsproduct")
  productownerships   productownership[]
  inventories         productinventory[]
  productmedia        media[]    @relation("ProductMedia")  

  @@unique([categoryid, name, sku])
}

model productattribute {
  id        String    @id @default(uuid())
  key       String
  value     String
  type      String
  productid String
  product   product   @relation(fields: [productid], references: [id])
  createdat DateTime? @default(now())
  updatedat DateTime? @updatedAt
}

model token {
  id                String              @id @default(uuid())
  name              String?
  chaintype         String
  contractaddress   String
  symbol            String?
  decimalprecision  Int
  isactive          Boolean?
  createdat         String?
  transactions      transaction[]
  admintransactions admintransaction[]
  staketransaction  staketransaction[]
  inventory         productinventory?
}

model transaction {
  id                    String    @id @default(uuid())
  tenantid              String
  customerid            String?
  customer              customer? @relation(fields: [customerid], references: [id])
  tokenid               String?
  token                 token?    @relation(fields: [tokenid], references: [id])
  productid             String?
  product               product?  @relation(fields: [productid], references: [id])
  walletaddress         String?
  symbol                String?
  receiverwalletaddress String?
  chaintype             String?
  amount                Float?
  txhash                String
  status                String?
  tenantuserid          String?
  isactive              Boolean?
  createdat             String?
  updatedat             String?
  error                 String?
  network               String?
  tenanttransactionid   String?
  callbackstatus        String?
}

model contracttransaction {
  id              String @id @default(uuid())
  chain           String
  txhash          String
  fromaddress     String
  contractaddress String
  methodname      String
  params          String
}

model admintransaction {
  id                    String     @id @default(uuid())
  tenantid              String
  adminuserid           String?
  adminuser             adminuser? @relation(fields: [adminuserid], references: [id])
  tokenid               String?
  token                 token?     @relation(fields: [tokenid], references: [id])
  walletaddress         String?
  symbol                String?
  receiverwalletaddress String?
  chaintype             String?
  amount                Float?
  txhash                String
  status                String?
  isactive              Boolean?
  createdat             String?
  updatedat             String?
  error                 String?
  network               String?
  tenanttransactionid   String?
  callbackstatus        String?
}

model validatornodes {
  id                   String   @id @default(uuid())
  tenantid             String?
  validatornodeaddress String?
  name                 String?
  reward               String?
  ismaster             Boolean?
  isactive             Boolean?
  createdat            String?
  updatedat            String?
  chaintype            String?
}

model wallet {
  id            String    @id @default(uuid())
  customerid    String?
  customer      customer? @relation(fields: [customerid], references: [id])
  walletaddress String?
  chaintype     String?
  wallettype    String?
  walletid      String?
  isactive      Boolean?
  createdat     String?
}

model adminwallet {
  id            String     @id @default(uuid())
  adminuserid   String?
  adminuser     adminuser? @relation(fields: [adminuserid], references: [id])
  walletaddress String?
  chaintype     String?
  wallettype    String?
  walletid      String?
  isactive      Boolean?
  tenantid      String?
  createdat     String?
}

model productwishlist {
  id         String   @id @default(uuid())
  customerid String
  customer   customer @relation(fields: [customerid], references: [id], onDelete: Cascade)
  productid  String
  product    product  @relation(fields: [productid], references: [id], onDelete: Cascade)
  createdat  DateTime @default(now())
}

enum orderstatus {
  CREATED
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  DISPUTED
}

model orders {
  id         String       @id @default(uuid())
  sellerid   String?
  seller     customer?    @relation("SellerOrders", fields: [sellerid], references: [id])
  buyerid    String?
  buyer      customer?    @relation("BuyerOrders", fields: [buyerid], references: [id])
  productid  String?
  product    product?     @relation(fields: [productid], references: [id])
  price      Float?
  quantity   Int?
  status     orderstatus
  productreviews productreview[]
  createdat  DateTime   @default(now())
  updatedat  DateTime   @updatedAt
}

model productreview {
  id          String       @id @default(uuid())
  comment     String?
  rating      Float?
  customerid String
  customer   customer?    @relation(fields: [customerid], references: [id])
  productid   String?
  product     product?     @relation(fields: [productid], references: [id])
  orderid     String?
  orders      orders?     @relation(fields: [orderid], references: [id])
  createdat   DateTime     @default(now())
  updatedat   DateTime    @updatedAt
}

model productcollection {
  id          String       @id @default(uuid())
  customerid String?
  customer   customer?    @relation(fields: [customerid], references: [id])
  products               productcollectionproducts[] @relation("productcollectionproductscollection")
  title       String?
  description String?
  createdat   DateTime     @default(now())
  updatedat   DateTime    @updatedAt
}
model productcollectionproducts {
  productcollectionid     String
  productcollection       productcollection          @relation(fields: [productcollectionid], references: [id], name: "productcollectionproductscollection")
  productid               String
  product                 product                    @relation(fields: [productid], references: [id], name: "productcollectionproductsproduct")

  @@id([productcollectionid, productid])
}

model productownership {
  id         String   @id @default(uuid())
  customerid String
  customer   customer @relation(fields: [customerid], references: [id])
  productid  String
  product    product  @relation(fields: [productid], references: [id])
  fractional Boolean
  fraction   Float?
  isdeleted  Boolean?
} 

enum ProductStatus {
ACTIVE
INACTIVE
}

model productinventory {
  id                   String    @id @default(uuid())
  productid            String
  product              product   @relation(fields: [productid], references: [id])
  inventoryid          String    @unique
  isdeleted            Boolean?
  inventorycategory    String
  purchasedpercentage  Float?
  availablepercentage  Float?
  price                Float
  quantity             Int
  ownershipnft         Boolean
  smartcontractaddress String?
  tokenid              String?   @unique
  token                token?    @relation(fields: [tokenid], references: [id])
  createdat            DateTime? @default(now())
  updatedat            DateTime? @updatedAt
}

model media {
  id         String   @id @default(uuid())
  entityid   String 
  entitytype String
  url        String
  type       String?   
  createdat  DateTime @default(now())
  updatedat  DateTime @updatedAt
  product    product? @relation("ProductMedia", fields: [entityid], references: [id])
}