// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nApi"]
  binaryTargets   = ["rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model chaintype {
  id         String  @id @default(uuid())
  symbol     String
  chain      String
  wallettype String
  isactive   Boolean
  createdat  String
}

model cubistconfig {
  id                 String  @id @default(uuid())
  tenantid           String
  tenant             tenant  @relation(fields: [tenantid], references: [id])
  orgid              String
  isactive           Boolean
  createdat          String
  updatedat          String
  signersecretname   String
  gaspayersecretname String
}

model customer {
  id                String             @id @default(uuid())
  tenantuserid      String
  tenantid          String
  tenant            tenant             @relation(fields: [tenantid], references: [id])
  emailid           String
  name              String
  cubistuserid      String
  isactive          Boolean
  createdat         String
  isbonuscredit     Boolean
  customerkycs      customerkyc[]
  wallets           wallet[]
  transactions      transaction[]
  staketransactions staketransaction[]
  stakeaccounts     stakeaccount[]
}

model customerkyc {
  id         String   @id @default(uuid())
  customerid String
  customer   customer @relation(fields: [customerid], references: [id])
  kyctype    String
  type       String
  kycid      String
  status     String
  error      String
  tenantid   String
  tenant     tenant   @relation(fields: [tenantid], references: [id])
  isactive   Boolean
  createdat  String
  updatedat  String
}

model gaspayerwallet {
  id             String  @id @default(uuid())
  tenantid       String
  tenant         tenant  @relation(fields: [tenantid], references: [id])
  walletaddress  String
  symbol         String
  walletid       String
  wallettype     String
  iscubistwallet Boolean
  cubistuserid   String
  isgaspayer     Boolean
  isactive       Boolean
  createdat      String
  publickey      String
}

model masterwallet {
  id             String  @id @default(uuid())
  tenantid       String
  purpose        String
  walletaddress  String
  symbol         String
  walletid       String
  wallettype     String
  iscubistwallet Boolean
  cubistuserid   String
  isactive       Boolean
  createdat      String
  chaintype      String
}

model stakeaccount {
  id                        String             @id @default(uuid())
  tenantid                  String
  customerid                String
  customer                  customer           @relation(fields: [customerid], references: [id])
  symbol                    String
  walletaddress             String
  network                   String
  stakeaccountpubkey        String
  status                    String
  amount                    Float
  validatornodeaddress      String
  tenantuserid              String
  tenanttransactionid       String
  chaintype                 String
  lockupexpirationtimestamp String
  isactive                  Boolean
  createdat                 String
  updatedat                 String
  error                     String
  staketransactions         staketransaction[]
}

model staketransaction {
  id                    String       @id @default(uuid())
  tenantid              String
  customerid            String
  customer              customer     @relation(fields: [customerid], references: [id])
  tokenid               String
  walletaddress         String
  symbol                String
  receiverwalletaddress String
  chaintype             String
  amount                Float
  txhash                String
  status                String
  tenantuserid          String
  isactive              Boolean
  createdat             String
  updatedat             String
  error                 String
  network               String
  tenanttransactionid   String
  callbackstatus        String
  stakeaccountid        String
  stakeaccount          stakeaccount @relation(fields: [stakeaccountid], references: [id])
  type                  String
}

model sumsubconfig {
  id              String  @id @default(uuid())
  tenantid        String
  baseurl         String
  sumsubAppToken  String
  sumsubSecretKey String
  ismaster        Boolean
  isactive        Boolean
  createdat       String
  updatedat       String
}

model tenant {
  id              String           @id @default(uuid())
  name            String
  apiKey          String
  logo            String
  isactive        Boolean
  createdat       String
  tenantsecret    String
  tenantheaderkey String
  callbackurl     String
  cubistorgid     String
  cubistconfig    cubistconfig[]
  customer        customer[]
  customerkyc     customerkyc[]
  gaspayerwallet  gaspayerwallet[]
}

model token {
  id               String        @id @default(uuid())
  name             String
  chaintype        String
  contractaddress  String
  symbol           String
  decimalprecision Int
  isactive         Boolean
  createdat        String
  transactions     transaction[]
}

model transaction {
  id                    String   @id @default(uuid())
  tenantid              String
  customerid            String
  customer              customer @relation(fields: [customerid], references: [id])
  tokenid               String
  token                 token    @relation(fields: [tokenid], references: [id])
  walletaddress         String
  symbol                String
  receiverwalletaddress String
  chaintype             String
  amount                Float
  txhash                String
  status                String
  tenantuserid          String
  isactive              Boolean
  createdat             String
  updatedat             String
  error                 String
  network               String
  tenanttransactionid   String
  callbackstatus        String
}

model validatornodes {
  id                   String  @id @default(uuid())
  tenantid             String
  validatornodeaddress String
  name                 String
  reward               String
  ismaster             Boolean
  isactive             Boolean
  createdat            String
  updatedat            String
  chaintype            String
}

model wallet {
  id            String   @id @default(uuid())
  customerid    String
  customer      customer @relation(fields: [customerid], references: [id])
  walletaddress String
  chaintype     String
  wallettype    String
  walletid      String
  isactive      Boolean
  createdat     String
}
