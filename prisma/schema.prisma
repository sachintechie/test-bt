// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id                 String             @id @default(uuid())
  tenant_user_id     String
  tenant_id          String?
  email              String
  name               String
  cubist_user_id     String
  is_active          Boolean
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  wallets            Wallet[]
  transactions       Transaction[]
  stake_accounts     StakeAccount[]
  customer_kycs      CustomerKyc[]
  tenant             Tenant?            @relation(fields: [tenantId], references: [id])
  tenantId           String?
  stake_transactions StakeTransaction[]
}

model Tenant {
  id                 String             @id @default(uuid())
  name               String
  api_key            String
  logo               String
  is_active          Boolean
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  customers          Customer[]
  wallets            Wallet[]
  transactions       Transaction[]
  stake_accounts     StakeAccount[]
  stake_transactions StakeTransaction[]
  customer_kycs      CustomerKyc[]
}

model Wallet {
  id                String    @id @default(uuid())
  customer_id       String?
  tenant_id         String?
  wallet_address    String?
  symbol            String
  wallet_id         String
  chain_type        String?
  wallet_type       String?
  is_active         Boolean?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  balance           Float?
  decimal_precision Int?
  contract_address  String?
  customer          Customer? @relation(fields: [customer_id], references: [id])
  tenant            Tenant?   @relation(fields: [tenant_id], references: [id])
}

model Token {
  id                 String             @id @default(uuid())
  name               String
  symbol             String
  chain_type         String
  contract_address   String
  is_active          Boolean
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  decimal_precision  Int
  transactions       Transaction[]
  stake_transactions StakeTransaction[]
}

model Transaction {
  id                      String            @id @default(uuid())
  customer_id             String
  callback_status         CallbackStatus    @default(PENDING)
  token_id                String
  tenant_transaction_id   String
  network                 String
  status                  TransactionStatus @default(PENDING)
  error                   String?
  tenant_user_id          String
  wallet_address          String
  receiver_wallet_address String
  chain_type              String
  amount                  Float
  symbol                  String
  txhash                  String
  tenant_id               String
  is_active               Boolean
  created_at              DateTime          @default(now())
  updated_at              DateTime          @updatedAt
  customer                Customer          @relation(fields: [customer_id], references: [id])
  token                   Token             @relation(fields: [token_id], references: [id])
  tenant                  Tenant            @relation(fields: [tenant_id], references: [id])
}

model StakeTransaction {
  id                      String             @id @default(uuid())
  customer_id             String
  type                    StakeType
  token_id                String
  tenant_transaction_id   String
  stake_account_pubkey    String
  network                 String
  status                  StakeAccountStatus @default(OPEN)
  error                   String?
  tenant_user_id          String
  wallet_address          String
  receiver_wallet_address String
  chain_type              String
  amount                  Float
  symbol                  String
  txhash                  String
  tenant_id               String
  is_active               Boolean
  stake_account_id        String
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt
  customer                Customer           @relation(fields: [customer_id], references: [id])
  token                   Token              @relation(fields: [token_id], references: [id])
  tenant                  Tenant             @relation(fields: [tenant_id], references: [id])
}

model StakeAccount {
  id                          String             @id @default(uuid())
  customer_id                 String
  lockup_expiration_timestamp Int
  tenant_transaction_id       String
  stake_account_pubkey        String
  network                     String
  status                      StakeAccountStatus @default(OPEN)
  error                       String?
  tenant_user_id              String
  wallet_address              String
  validator_node_address      String
  chain_type                  String
  amount                      Float
  symbol                      String
  tenant_id                   String
  is_active                   Boolean
  created_at                  DateTime           @default(now())
  updated_at                  DateTime           @updatedAt
  customer                    Customer           @relation(fields: [customer_id], references: [id])
  tenant                      Tenant             @relation(fields: [tenant_id], references: [id])
}

model CustomerKyc {
  id          String   @id @default(uuid())
  customer_id String
  kyc_type    String
  type        String
  kyc_id      String
  status      String
  error       String?
  tenant_id   String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  customer    Customer @relation(fields: [customer_id], references: [id])
  tenant      Tenant   @relation(fields: [tenant_id], references: [id])
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
}

enum CallbackStatus {
  SUCCESS
  FAILED
  PENDING
}

enum StakeAccountStatus {
  OPEN
  CLOSED
  FAILED
  MERGED
}

enum StakeType {
  STAKE
  UNSTAKE
}
