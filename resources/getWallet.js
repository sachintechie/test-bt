"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const cs = require("@cubist-labs/cubesigner-sdk");
const CubeSignerClient_1 = require("./CubeSignerClient");
const dbFunctions_1 = require("./dbFunctions");
const web3_js_1 = require("@solana/web3.js");
const ORG_ID = process.env["ORG_ID"];
const env = {
    SignerApiRoot: process.env["CS_API_ROOT"] ?? "http://gamma.signer.cubist.dev",
};
const aws_sdk_1 = require("aws-sdk");
const secretName = "CubeSignerToken0E1D2960-qP9dUIeYntSs";
const region = "us-east-1";
const client = new aws_sdk_1.SecretsManager({ region: region });
const handler = async (event) => {
    try {
        // console.log(
        //   "Event",ORG_ID,
        //   event.identity,
        //   event.arguments,
        //   event.request.headers.identity
        // );
        const secret = await getSecretValue(secretName);
        console.log("Secret", secret);
        const balance = await getSolBalance("HGRj74N58LwbjSLxQ66UDoZQpLF3mnSve4uJ3xtF6Pg9");
        console.log("Balance", balance);
        const wallet = await createUser(event.identity, event.arguments?.tenantUserId, event.request?.headers?.identity);
        return {
            statusCode: 200,
            body: {
                data: event.arguments,
                error: null,
                wallet: wallet,
                balance: balance,
            },
        };
    }
    catch (err) {
        console.log("In catch Block Error", err);
        return {
            statusCode: 400,
            body: {
                data: event.arguments,
                error: err
            },
        };
    }
};
exports.handler = handler;
async function getSecretValue(secretName) {
    try {
        console.log("Getting secret value", secretName);
        const data = await client
            .getSecretValue({ SecretId: secretName })
            .promise();
        console.log("Secret value", data);
        if ("SecretString" in data) {
            return data.SecretString;
        }
        else {
            let buff = Buffer.from(data.SecretBinary, "base64");
            return buff.toString("ascii");
        }
    }
    catch (err) {
        console.log(err);
        return err;
    }
}
async function createUser(tenant, tenantuserid, oidcToken) {
    console.log("Creating user");
    try {
        // const customer = await getCustomer(tenantuserid, tenant.id);
        // if (customer != null && customer.cubistuserid) {
        //   const wallet = await getWalletByCustomer(tenantuserid, "SOL", tenant);
        //   return {
        //     wallet,
        //     tenantUserId: tenantuserid,
        //   };
        // } else {
        const { client, org } = await (0, CubeSignerClient_1.getCsClient)();
        console.log("Creating user", client);
        const proof = await cs.CubeSignerClient.proveOidcIdentity(env, ORG_ID, oidcToken);
        console.log("Verifying identity", proof);
        await org.verifyIdentity(proof);
        console.log("Verified");
        //assert(proof.identity, "Identity should be set when proof is obtained using OIDC token");
        const iss = proof.identity.iss;
        const sub = proof.identity.sub;
        const email = proof.email;
        const name = proof.preferred_username;
        // If user does not exist, create it
        if (!proof.user_info?.user_id) {
            console.log(`Creating OIDC user ${email}`);
            const org = client.org();
            const cubistUserId = await org.createOidcUser({ iss, sub }, email, {
                name,
            });
            console.log(`Creating key for user ${cubistUserId}...`);
            const customer = await (0, dbFunctions_1.createCustomer)({
                emailid: email ? email : "",
                name: name ? name : "",
                tenantuserid,
                tenantid: tenant.id,
                cubistuserid: cubistUserId,
                isactive: true,
                createdat: new Date().toISOString(),
            });
            const wallet = await (0, dbFunctions_1.createWallet)(org, cubistUserId, customer);
            return {
                wallet,
                tenantUserId: tenantuserid,
            };
        }
        else {
            const wallet = await (0, dbFunctions_1.getWalletByCustomer)(tenantuserid, "SOL", tenant);
            return {
                wallet,
                tenantUserId: tenantuserid,
            };
        }
        // }
    }
    catch (e) {
        console.log(`Not verified: ${e}`);
        throw e;
    }
}
async function getSolBalance(address) {
    try {
        console.log("Address", address);
        const pubkey = new web3_js_1.PublicKey(address);
        console.log("pubkey", pubkey);
        const connection = await getSolConnection();
        console.log(connection, "connection");
        console.log(await connection.getBalance(pubkey), "connection");
        const balance = (await connection.getBalance(pubkey)) / web3_js_1.LAMPORTS_PER_SOL;
        console.log("Balance", balance);
        return balance;
    }
    catch (err) {
        console.log(err);
        //throw err;
        return 0;
    }
}
async function getSolConnection() {
    // const connection = new Connection(SOLANA_RPC_PROVIDER, "confirmed");
    const connection = new web3_js_1.Connection((0, web3_js_1.clusterApiUrl)("devnet"), "confirmed");
    return connection;
}
//# sourceMappingURL=data:application/json;base64,