"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAvaxBalance = getAvaxBalance;
exports.getAvaxConnection = getAvaxConnection;
exports.verifyAvalancheTransaction = verifyAvalancheTransaction;
const avalanche_1 = require("avalanche");
async function getAvaxBalance(address) {
    const pAddress = address;
    const { xchain, pchain } = await getAvaxConnection();
    const balanceResponse = await pchain.getBalance(pAddress);
    const balance = balanceResponse.balance;
    console.log(`P-Chain Balance: ${balance} nAVAX`);
    return balance;
}
async function getAvaxConnection() {
    const ip = "api.avax.network";
    const port = 443;
    const protocol = "https";
    const networkID = 1; // Mainnet ID is 1
    const avalanche = new avalanche_1.Avalanche(ip, port, protocol, networkID);
    const xchain = avalanche.XChain();
    const pchain = avalanche.PChain();
    return { xchain, pchain };
}
async function verifyAvalancheTransaction(txID) {
    try {
        const { pchain } = await getAvaxConnection();
        const status = await pchain.getTxStatus(txID);
        console.log(`Transaction Status: ${status}`);
        return status;
    }
    catch (error) {
        console.error("Error fetching transaction status:", error);
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uRnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29tbW9uRnVuY3Rpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBTUEsd0NBT0c7QUFFRCw4Q0FTQztBQUVELGdFQVVDO0FBcENILHlDQUF3RDtBQU1qRCxLQUFLLFVBQVUsY0FBYyxDQUFDLE9BQWU7SUFDaEQsTUFBTSxRQUFRLEdBQVcsT0FBTyxDQUFDO0lBQ2pDLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEdBQUcsTUFBTSxpQkFBaUIsRUFBRSxDQUFDO0lBQ3JELE1BQU0sZUFBZSxHQUFHLE1BQU0sTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxRCxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDO0lBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLE9BQU8sUUFBUSxDQUFDLENBQUM7SUFDakQsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVNLEtBQUssVUFBVSxpQkFBaUI7SUFDckMsTUFBTSxFQUFFLEdBQVcsa0JBQWtCLENBQUM7SUFDdEMsTUFBTSxJQUFJLEdBQVcsR0FBRyxDQUFDO0lBQ3pCLE1BQU0sUUFBUSxHQUFXLE9BQU8sQ0FBQztJQUNqQyxNQUFNLFNBQVMsR0FBVyxDQUFDLENBQUMsQ0FBQyxrQkFBa0I7SUFDL0MsTUFBTSxTQUFTLEdBQWMsSUFBSSxxQkFBUyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzFFLE1BQU0sTUFBTSxHQUFXLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUMxQyxNQUFNLE1BQU0sR0FBa0IsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFDNUIsQ0FBQztBQUVNLEtBQUssVUFBVSwwQkFBMEIsQ0FBQyxJQUFZO0lBQzNELElBQUksQ0FBQztRQUNELE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLGlCQUFpQixFQUFFLENBQUM7UUFDL0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLE1BQU0sRUFBRSxDQUFDLENBQUM7UUFDN0MsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7UUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdmFsYW5jaGUsIEJpblRvb2xzLCBCdWZmZXIgfSBmcm9tIFwiYXZhbGFuY2hlXCI7XG5pbXBvcnQgeyBBVk1BUEkgfSBmcm9tIFwiYXZhbGFuY2hlL2Rpc3QvYXBpcy9hdm1cIjtcbmltcG9ydCB7IFBsYXRmb3JtVk1BUEkgfSBmcm9tIFwiYXZhbGFuY2hlL2Rpc3QvYXBpcy9wbGF0Zm9ybXZtXCI7XG5cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QXZheEJhbGFuY2UoYWRkcmVzczogc3RyaW5nKSB7XG4gICAgY29uc3QgcEFkZHJlc3M6IHN0cmluZyA9IGFkZHJlc3M7IFxuICAgIGNvbnN0IHsgeGNoYWluLCBwY2hhaW4gfSA9IGF3YWl0IGdldEF2YXhDb25uZWN0aW9uKCk7XG4gICAgY29uc3QgYmFsYW5jZVJlc3BvbnNlID0gYXdhaXQgcGNoYWluLmdldEJhbGFuY2UocEFkZHJlc3MpO1xuICAgIGNvbnN0IGJhbGFuY2UgPSBiYWxhbmNlUmVzcG9uc2UuYmFsYW5jZTtcbiAgICBjb25zb2xlLmxvZyhgUC1DaGFpbiBCYWxhbmNlOiAke2JhbGFuY2V9IG5BVkFYYCk7XG4gICAgcmV0dXJuIGJhbGFuY2U7XG4gIH1cblxuICBleHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QXZheENvbm5lY3Rpb24oKSB7XG4gICAgY29uc3QgaXA6IHN0cmluZyA9IFwiYXBpLmF2YXgubmV0d29ya1wiO1xuICAgIGNvbnN0IHBvcnQ6IG51bWJlciA9IDQ0MztcbiAgICBjb25zdCBwcm90b2NvbDogc3RyaW5nID0gXCJodHRwc1wiO1xuICAgIGNvbnN0IG5ldHdvcmtJRDogbnVtYmVyID0gMTsgLy8gTWFpbm5ldCBJRCBpcyAxXG4gICAgY29uc3QgYXZhbGFuY2hlOiBBdmFsYW5jaGUgPSBuZXcgQXZhbGFuY2hlKGlwLCBwb3J0LCBwcm90b2NvbCwgbmV0d29ya0lEKTtcbiAgICBjb25zdCB4Y2hhaW46IEFWTUFQSSA9IGF2YWxhbmNoZS5YQ2hhaW4oKTtcbiAgICBjb25zdCBwY2hhaW46IFBsYXRmb3JtVk1BUEkgPSBhdmFsYW5jaGUuUENoYWluKCk7XG4gICAgcmV0dXJuIHsgeGNoYWluLCBwY2hhaW4gfTtcbiAgfVxuXG4gIGV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlBdmFsYW5jaGVUcmFuc2FjdGlvbih0eElEOiBzdHJpbmcpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB7IHBjaGFpbiB9ID0gYXdhaXQgZ2V0QXZheENvbm5lY3Rpb24oKTtcbiAgICAgIGNvbnN0IHN0YXR1cyA9IGF3YWl0IHBjaGFpbi5nZXRUeFN0YXR1cyh0eElEKTtcbiAgICAgIGNvbnNvbGUubG9nKGBUcmFuc2FjdGlvbiBTdGF0dXM6ICR7c3RhdHVzfWApO1xuICAgICAgcmV0dXJuIHN0YXR1cztcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHRyYW5zYWN0aW9uIHN0YXR1czpcIiwgZXJyb3IpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9Il19