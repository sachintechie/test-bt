"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const web3_1 = __importDefault(require("web3"));
const BridgeTowerNftUpgradeableERC1155_json_1 = __importDefault(require("../abi/BridgeTowerNftUpgradeableERC1155.json"));
const AVAX_RPC_URL = process.env.AVAX_RPC_URL;
const ETH_RPC_URL = process.env.ETH_RPC_URL;
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const CONTRACT_ABI = BridgeTowerNftUpgradeableERC1155_json_1.default.abi;
const web3Avax = new web3_1.default(AVAX_RPC_URL);
const web3Eth = new web3_1.default(ETH_RPC_URL);
const handler = async (event, context) => {
    const { toAddress, ids, amounts, chain, contractAddress } = event;
    const web3 = chain === 'AVAX' ? web3Avax : web3Eth;
    const account = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    web3.eth.accounts.wallet.add(account);
    const contract = new web3.eth.Contract(CONTRACT_ABI, contractAddress);
    const tx = {
        from: account.address,
        to: contractAddress,
        gas: 2000000,
        data: contract.methods.batchMint(toAddress, ids, amounts, undefined).encodeABI()
    };
    try {
        const receipt = await web3.eth.sendTransaction(tx);
        return {
            status: 200,
            transactionHash: receipt.transactionHash,
            error: null
        };
    }
    catch (error) {
        return {
            status: 500,
            transactionHash: null,
            error: error.message
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludEVSQzExNTUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtaW50RVJDMTE1NS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFDeEIseUhBQXVFO0FBR3ZFLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBYSxDQUFDO0FBQy9DLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBWSxDQUFDO0FBQzdDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBWSxDQUFDO0FBQzdDLE1BQU0sWUFBWSxHQUFHLCtDQUFXLENBQUMsR0FBRyxDQUFDO0FBRXJDLE1BQU0sUUFBUSxHQUFHLElBQUksY0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sT0FBTyxHQUFHLElBQUksY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRS9CLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFVLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDeEQsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDbEUsTUFBTSxJQUFJLEdBQUMsS0FBSyxLQUFHLE1BQU0sQ0FBQSxDQUFDLENBQUEsUUFBUSxDQUFBLENBQUMsQ0FBQSxPQUFPLENBQUM7SUFFM0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsQ0FBQztJQUV0RSxNQUFNLEVBQUUsR0FBRztRQUNULElBQUksRUFBRSxPQUFPLENBQUMsT0FBTztRQUNyQixFQUFFLEVBQUUsZUFBZTtRQUNuQixHQUFHLEVBQUUsT0FBTztRQUNaLElBQUksRUFBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUU7S0FDbEYsQ0FBQztJQUVGLElBQUksQ0FBQztRQUNILE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkQsT0FBTztZQUNMLE1BQU0sRUFBRSxHQUFHO1lBQ1gsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlO1lBQ3hDLEtBQUssRUFBRSxJQUFJO1NBQ1osQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEtBQVUsRUFBRSxDQUFDO1FBQ3BCLE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRztZQUNYLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTztTQUNyQixDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQTlCVyxRQUFBLE9BQU8sV0E4QmxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdlYjMgZnJvbSBcIndlYjNcIjtcbmltcG9ydCBjb250cmFjdEFiaSBmcm9tICcuLi9hYmkvQnJpZGdlVG93ZXJOZnRVcGdyYWRlYWJsZUVSQzExNTUuanNvbic7XG5cblxuY29uc3QgQVZBWF9SUENfVVJMID0gcHJvY2Vzcy5lbnYuQVZBWF9SUENfVVJMITtcbmNvbnN0IEVUSF9SUENfVVJMID0gcHJvY2Vzcy5lbnYuRVRIX1JQQ19VUkwhO1xuY29uc3QgUFJJVkFURV9LRVkgPSBwcm9jZXNzLmVudi5QUklWQVRFX0tFWSE7XG5jb25zdCBDT05UUkFDVF9BQkkgPSBjb250cmFjdEFiaS5hYmk7XG5cbmNvbnN0IHdlYjNBdmF4ID0gbmV3IFdlYjMoQVZBWF9SUENfVVJMKTtcbmNvbnN0IHdlYjNFdGggPSBuZXcgV2ViMyhFVEhfUlBDX1VSTCk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnksIGNvbnRleHQ6IGFueSkgPT4ge1xuICBjb25zdCB7IHRvQWRkcmVzcywgaWRzLCBhbW91bnRzLCBjaGFpbiwgY29udHJhY3RBZGRyZXNzIH0gPSBldmVudDtcbiAgY29uc3Qgd2ViMz1jaGFpbj09PSdBVkFYJz93ZWIzQXZheDp3ZWIzRXRoO1xuXG4gIGNvbnN0IGFjY291bnQgPSB3ZWIzLmV0aC5hY2NvdW50cy5wcml2YXRlS2V5VG9BY2NvdW50KFBSSVZBVEVfS0VZKTtcbiAgd2ViMy5ldGguYWNjb3VudHMud2FsbGV0LmFkZChhY2NvdW50KTtcblxuICBjb25zdCBjb250cmFjdCA9IG5ldyB3ZWIzLmV0aC5Db250cmFjdChDT05UUkFDVF9BQkksIGNvbnRyYWN0QWRkcmVzcyk7XG5cbiAgY29uc3QgdHggPSB7XG4gICAgZnJvbTogYWNjb3VudC5hZGRyZXNzLFxuICAgIHRvOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZ2FzOiAyMDAwMDAwLFxuICAgIGRhdGE6ICBjb250cmFjdC5tZXRob2RzLmJhdGNoTWludCh0b0FkZHJlc3MsIGlkcywgYW1vdW50cywgdW5kZWZpbmVkKS5lbmNvZGVBQkkoKVxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHdlYjMuZXRoLnNlbmRUcmFuc2FjdGlvbih0eCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgdHJhbnNhY3Rpb25IYXNoOiByZWNlaXB0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIHRyYW5zYWN0aW9uSGFzaDogbnVsbCxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==