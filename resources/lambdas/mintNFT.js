"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const web3_1 = __importDefault(require("web3"));
const BridgeTowerNftUpgradeable_json_1 = __importDefault(require("../abi/BridgeTowerNftUpgradeable.json"));
const AVAX_RPC_URL = process.env.AVAX_RPC_URL;
const ETH_RPC_URL = process.env.ETH_RPC_URL;
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const CONTRACT_ABI = BridgeTowerNftUpgradeable_json_1.default.abi;
const web3Avax = new web3_1.default(AVAX_RPC_URL);
const web3Eth = new web3_1.default(ETH_RPC_URL);
const handler = async (event, context) => {
    const { toAddress, numberOfTokens, chain, contractAddress } = event;
    const web3 = chain === 'AVAX' ? web3Avax : web3Eth;
    const account = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    web3.eth.accounts.wallet.add(account);
    const contract = new web3.eth.Contract(CONTRACT_ABI, contractAddress);
    const tx = {
        from: account.address,
        to: contractAddress,
        gas: 2000000,
        data: contract.methods.batchMint(toAddress, numberOfTokens).encodeABI()
    };
    try {
        const receipt = await web3.eth.sendTransaction(tx);
        return {
            status: 200,
            transactionHash: receipt.transactionHash,
            error: null
        };
    }
    catch (error) {
        return {
            status: 500,
            transactionHash: null,
            error: error.message
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWludE5GVC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1pbnRORlQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsZ0RBQXdCO0FBQ3hCLDJHQUFnRTtBQUdoRSxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQWEsQ0FBQztBQUMvQyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVksQ0FBQztBQUM3QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVksQ0FBQztBQUM3QyxNQUFNLFlBQVksR0FBRyx3Q0FBVyxDQUFDLEdBQUcsQ0FBQztBQUVyQyxNQUFNLFFBQVEsR0FBRyxJQUFJLGNBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUN4QyxNQUFNLE9BQU8sR0FBRyxJQUFJLGNBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUUvQixNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLE9BQVksRUFBRSxFQUFFO0lBQ3hELE1BQU0sRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFDcEUsTUFBTSxJQUFJLEdBQUMsS0FBSyxLQUFHLE1BQU0sQ0FBQSxDQUFDLENBQUEsUUFBUSxDQUFBLENBQUMsQ0FBQSxPQUFPLENBQUM7SUFFM0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDbkUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV0QyxNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsQ0FBQztJQUV0RSxNQUFNLEVBQUUsR0FBRztRQUNULElBQUksRUFBRSxPQUFPLENBQUMsT0FBTztRQUNyQixFQUFFLEVBQUUsZUFBZTtRQUNuQixHQUFHLEVBQUUsT0FBTztRQUNaLElBQUksRUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUMsU0FBUyxFQUFFO0tBQzFFLENBQUM7SUFFRixJQUFJLENBQUM7UUFDSCxNQUFNLE9BQU8sR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRztZQUNYLGVBQWUsRUFBRSxPQUFPLENBQUMsZUFBZTtZQUN4QyxLQUFLLEVBQUUsSUFBSTtTQUNaLENBQUM7SUFDSixDQUFDO0lBQUMsT0FBTyxLQUFVLEVBQUUsQ0FBQztRQUNwQixPQUFPO1lBQ0wsTUFBTSxFQUFFLEdBQUc7WUFDWCxlQUFlLEVBQUUsSUFBSTtZQUNyQixLQUFLLEVBQUUsS0FBSyxDQUFDLE9BQU87U0FDckIsQ0FBQztJQUNKLENBQUM7QUFDSCxDQUFDLENBQUM7QUE5QlcsUUFBQSxPQUFPLFdBOEJsQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXZWIzIGZyb20gXCJ3ZWIzXCI7XG5pbXBvcnQgY29udHJhY3RBYmkgZnJvbSAnLi4vYWJpL0JyaWRnZVRvd2VyTmZ0VXBncmFkZWFibGUuanNvbic7XG5cblxuY29uc3QgQVZBWF9SUENfVVJMID0gcHJvY2Vzcy5lbnYuQVZBWF9SUENfVVJMITtcbmNvbnN0IEVUSF9SUENfVVJMID0gcHJvY2Vzcy5lbnYuRVRIX1JQQ19VUkwhO1xuY29uc3QgUFJJVkFURV9LRVkgPSBwcm9jZXNzLmVudi5QUklWQVRFX0tFWSE7XG5jb25zdCBDT05UUkFDVF9BQkkgPSBjb250cmFjdEFiaS5hYmk7XG5cbmNvbnN0IHdlYjNBdmF4ID0gbmV3IFdlYjMoQVZBWF9SUENfVVJMKTtcbmNvbnN0IHdlYjNFdGggPSBuZXcgV2ViMyhFVEhfUlBDX1VSTCk7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnksIGNvbnRleHQ6IGFueSkgPT4ge1xuICBjb25zdCB7IHRvQWRkcmVzcywgbnVtYmVyT2ZUb2tlbnMsIGNoYWluLCBjb250cmFjdEFkZHJlc3MgfSA9IGV2ZW50O1xuICBjb25zdCB3ZWIzPWNoYWluPT09J0FWQVgnP3dlYjNBdmF4OndlYjNFdGg7XG5cbiAgY29uc3QgYWNjb3VudCA9IHdlYjMuZXRoLmFjY291bnRzLnByaXZhdGVLZXlUb0FjY291bnQoUFJJVkFURV9LRVkpO1xuICB3ZWIzLmV0aC5hY2NvdW50cy53YWxsZXQuYWRkKGFjY291bnQpO1xuXG4gIGNvbnN0IGNvbnRyYWN0ID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KENPTlRSQUNUX0FCSSwgY29udHJhY3RBZGRyZXNzKTtcblxuICBjb25zdCB0eCA9IHtcbiAgICBmcm9tOiBhY2NvdW50LmFkZHJlc3MsXG4gICAgdG86IGNvbnRyYWN0QWRkcmVzcyxcbiAgICBnYXM6IDIwMDAwMDAsXG4gICAgZGF0YTogICBjb250cmFjdC5tZXRob2RzLmJhdGNoTWludCh0b0FkZHJlc3MsIG51bWJlck9mVG9rZW5zKS5lbmNvZGVBQkkoKVxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHdlYjMuZXRoLnNlbmRUcmFuc2FjdGlvbih0eCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgdHJhbnNhY3Rpb25IYXNoOiByZWNlaXB0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIHRyYW5zYWN0aW9uSGFzaDogbnVsbCxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==