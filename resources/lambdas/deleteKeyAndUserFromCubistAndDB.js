"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const CubeSignerClient_1 = require("../cubist/CubeSignerClient");
const dbFunctions_1 = require("../db/dbFunctions");
const handler = async (event) => {
    try {
        const users = await deleteMasterUserAndWallet(event.arguments.customerWallets, event.arguments.tenantId);
        return {
            status: 200,
            data: users,
            error: null
        };
    }
    catch (err) {
        console.log("In catch Block Error", err);
        return {
            status: 400,
            data: null,
            error: err
        };
    }
};
exports.handler = handler;
async function deleteMasterUserAndWallet(customerWallets, tenantId) {
    try {
        console.log("TenantId", tenantId, customerWallets, "customerWallets");
        const tenant = await (0, dbFunctions_1.getTenantCallBackUrl)(tenantId);
        console.log("Tenant", tenant);
        if (tenant != null && customerWallets != null && customerWallets?.length > 0) {
            const updatedCustomer = await (0, CubeSignerClient_1.deleteMasterCubistUser)(customerWallets, tenant.id);
            return {
                status: 200,
                data: updatedCustomer
            };
        }
        else {
            return {
                status: 200,
                data: "No Customers Found"
            };
        }
    }
    catch (err) {
        console.log(err);
        throw err;
    }
}
async function deleteUserAndWallet() {
    try {
        const schoolhackTenantId = "46a1ef54-2531-40a0-a42f-308b0598c24a";
        const tenant = await (0, dbFunctions_1.getTenantCallBackUrl)(schoolhackTenantId);
        console.log("Tenant", tenant);
        const customerWallets = await (0, dbFunctions_1.getAllCustomerAndWalletByTenant)(schoolhackTenantId);
        if (tenant != null && customerWallets != null && customerWallets?.length > 0) {
            const updatedCustomer = await (0, CubeSignerClient_1.deleteCubistUserKey)(customerWallets, tenant.id);
            return {
                status: 200,
                data: null
            };
        }
        else {
            return {
                status: 200,
                data: "No Customers Found"
            };
        }
    }
    catch (err) {
        console.log(err);
        throw err;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsZXRlS2V5QW5kVXNlckZyb21DdWJpc3RBbmREQi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRlbGV0ZUtleUFuZFVzZXJGcm9tQ3ViaXN0QW5kREIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUVBQXlGO0FBQ3pGLG1EQUEwRjtBQUVuRixNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDMUMsSUFBSSxDQUFDO1FBQ0gsTUFBTSxLQUFLLEdBQUcsTUFBTSx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hHLE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRztZQUNYLElBQUksRUFBRSxLQUFLO1lBQ1gsS0FBSyxFQUFFLElBQUk7U0FDWixDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRztZQUNYLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQWhCVyxRQUFBLE9BQU8sV0FnQmxCO0FBRUYsS0FBSyxVQUFVLHlCQUF5QixDQUFDLGVBQTBCLEVBQUUsUUFBZ0I7SUFDbkYsSUFBSSxDQUFDO1FBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFDLGVBQWUsRUFBRyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3BFLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBQSxrQ0FBb0IsRUFBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU5QixJQUFJLE1BQU0sSUFBSSxJQUFJLElBQUksZUFBZSxJQUFJLElBQUksSUFBSSxlQUFlLEVBQUUsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQzdFLE1BQU0sZUFBZSxHQUFHLE1BQU0sSUFBQSx5Q0FBc0IsRUFBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2pGLE9BQU87Z0JBQ0wsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsSUFBSSxFQUFFLGVBQWU7YUFDdEIsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTztnQkFDTCxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUUsb0JBQW9CO2FBQzNCLENBQUM7UUFDSixDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sR0FBRyxDQUFDO0lBQ1osQ0FBQztBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsbUJBQW1CO0lBQ2hDLElBQUksQ0FBQztRQUNILE1BQU0sa0JBQWtCLEdBQUcsc0NBQXNDLENBQUM7UUFDbEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLGtDQUFvQixFQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDOUIsTUFBTSxlQUFlLEdBQUcsTUFBTSxJQUFBLDZDQUErQixFQUFDLGtCQUFrQixDQUFDLENBQUM7UUFFbEYsSUFBSSxNQUFNLElBQUksSUFBSSxJQUFJLGVBQWUsSUFBSSxJQUFJLElBQUksZUFBZSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUM3RSxNQUFNLGVBQWUsR0FBRyxNQUFNLElBQUEsc0NBQW1CLEVBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUU5RSxPQUFPO2dCQUNMLE1BQU0sRUFBRSxHQUFHO2dCQUNYLElBQUksRUFBRSxJQUFJO2FBQ1gsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sT0FBTztnQkFDTCxNQUFNLEVBQUUsR0FBRztnQkFDWCxJQUFJLEVBQUUsb0JBQW9CO2FBQzNCLENBQUM7UUFDSixDQUFDO0lBQ0gsQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pCLE1BQU0sR0FBRyxDQUFDO0lBQ1osQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWxldGVDdWJpc3RVc2VyS2V5LCBkZWxldGVNYXN0ZXJDdWJpc3RVc2VyIH0gZnJvbSBcIi4uL2N1YmlzdC9DdWJlU2lnbmVyQ2xpZW50XCI7XG5pbXBvcnQgeyBnZXRBbGxDdXN0b21lckFuZFdhbGxldEJ5VGVuYW50LCBnZXRUZW5hbnRDYWxsQmFja1VybCB9IGZyb20gXCIuLi9kYi9kYkZ1bmN0aW9uc1wiO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlcnMgPSBhd2FpdCBkZWxldGVNYXN0ZXJVc2VyQW5kV2FsbGV0KGV2ZW50LmFyZ3VtZW50cy5jdXN0b21lcldhbGxldHMsZXZlbnQuYXJndW1lbnRzLnRlbmFudElkKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICBkYXRhOiB1c2VycyxcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coXCJJbiBjYXRjaCBCbG9jayBFcnJvclwiLCBlcnIpO1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IDQwMCxcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBlcnJvcjogZXJyXG4gICAgfTtcbiAgfVxufTtcblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlTWFzdGVyVXNlckFuZFdhbGxldChjdXN0b21lcldhbGxldHMgOiBzdHJpbmdbXSwgdGVuYW50SWQ6IHN0cmluZykge1xuICB0cnkge1xuICBjb25zb2xlLmxvZyhcIlRlbmFudElkXCIsIHRlbmFudElkLGN1c3RvbWVyV2FsbGV0cyAgLFwiY3VzdG9tZXJXYWxsZXRzXCIpO1xuICAgIGNvbnN0IHRlbmFudCA9IGF3YWl0IGdldFRlbmFudENhbGxCYWNrVXJsKHRlbmFudElkKTtcbiAgICBjb25zb2xlLmxvZyhcIlRlbmFudFwiLCB0ZW5hbnQpO1xuXG4gICAgaWYgKHRlbmFudCAhPSBudWxsICYmIGN1c3RvbWVyV2FsbGV0cyAhPSBudWxsICYmIGN1c3RvbWVyV2FsbGV0cz8ubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdXBkYXRlZEN1c3RvbWVyID0gYXdhaXQgZGVsZXRlTWFzdGVyQ3ViaXN0VXNlcihjdXN0b21lcldhbGxldHMsIHRlbmFudC5pZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgZGF0YTogdXBkYXRlZEN1c3RvbWVyXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgZGF0YTogXCJObyBDdXN0b21lcnMgRm91bmRcIlxuICAgICAgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZVVzZXJBbmRXYWxsZXQoKSB7XG4gIHRyeSB7XG4gICAgY29uc3Qgc2Nob29saGFja1RlbmFudElkID0gXCI0NmExZWY1NC0yNTMxLTQwYTAtYTQyZi0zMDhiMDU5OGMyNGFcIjtcbiAgICBjb25zdCB0ZW5hbnQgPSBhd2FpdCBnZXRUZW5hbnRDYWxsQmFja1VybChzY2hvb2xoYWNrVGVuYW50SWQpO1xuICAgIGNvbnNvbGUubG9nKFwiVGVuYW50XCIsIHRlbmFudCk7XG4gICAgY29uc3QgY3VzdG9tZXJXYWxsZXRzID0gYXdhaXQgZ2V0QWxsQ3VzdG9tZXJBbmRXYWxsZXRCeVRlbmFudChzY2hvb2xoYWNrVGVuYW50SWQpO1xuXG4gICAgaWYgKHRlbmFudCAhPSBudWxsICYmIGN1c3RvbWVyV2FsbGV0cyAhPSBudWxsICYmIGN1c3RvbWVyV2FsbGV0cz8ubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgdXBkYXRlZEN1c3RvbWVyID0gYXdhaXQgZGVsZXRlQ3ViaXN0VXNlcktleShjdXN0b21lcldhbGxldHMsIHRlbmFudC5pZCk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1czogMjAwLFxuICAgICAgICBkYXRhOiBudWxsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXM6IDIwMCxcbiAgICAgICAgZGF0YTogXCJObyBDdXN0b21lcnMgRm91bmRcIlxuICAgICAgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgdGhyb3cgZXJyO1xuICB9XG59XG4iXX0=