"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const web3_1 = __importDefault(require("web3"));
const BridgeTowerNftUpgradeable_json_1 = __importDefault(require("../abi/BridgeTowerNftUpgradeable.json"));
const AVAX_RPC_URL = process.env.AVAX_RPC_URL;
const ETH_RPC_URL = process.env.ETH_RPC_URL;
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const CONTRACT_ABI = BridgeTowerNftUpgradeable_json_1.default.abi;
const web3Avax = new web3_1.default(AVAX_RPC_URL);
const web3Eth = new web3_1.default(ETH_RPC_URL);
const handler = async (event, context) => {
    const { toAddress, tokenIds, chain, contractAddress } = event;
    const web3 = chain === 'AVAX' ? web3Avax : web3Eth;
    const account = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    web3.eth.accounts.wallet.add(account);
    const contract = new web3.eth.Contract(CONTRACT_ABI, contractAddress);
    const tx = {
        from: account.address,
        to: contractAddress,
        gas: 2000000,
        data: contract.methods.batchTransfer(account.address, toAddress, tokenIds).encodeABI()
    };
    try {
        const receipt = await web3.eth.sendTransaction(tx);
        return {
            status: 200,
            transactionHash: receipt.transactionHash,
            error: null
        };
    }
    catch (error) {
        return {
            status: 500,
            transactionHash: null,
            error: error.message
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJORlQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0cmFuc2Zlck5GVC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnREFBd0I7QUFDeEIsMkdBQWdFO0FBR2hFLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBYSxDQUFDO0FBQy9DLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBWSxDQUFDO0FBQzdDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBWSxDQUFDO0FBQzdDLE1BQU0sWUFBWSxHQUFHLHdDQUFXLENBQUMsR0FBRyxDQUFDO0FBRXJDLE1BQU0sUUFBUSxHQUFHLElBQUksY0FBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3hDLE1BQU0sT0FBTyxHQUFHLElBQUksY0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBRS9CLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFVLEVBQUUsT0FBWSxFQUFFLEVBQUU7SUFDeEQsTUFBTSxFQUFHLFNBQVMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBQyxHQUFHLEtBQUssQ0FBQztJQUM5RCxNQUFNLElBQUksR0FBQyxLQUFLLEtBQUcsTUFBTSxDQUFBLENBQUMsQ0FBQSxRQUFRLENBQUEsQ0FBQyxDQUFBLE9BQU8sQ0FBQztJQUUzQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuRSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXRDLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBRXRFLE1BQU0sRUFBRSxHQUFHO1FBQ1QsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPO1FBQ3JCLEVBQUUsRUFBRSxlQUFlO1FBQ25CLEdBQUcsRUFBRSxPQUFPO1FBQ1osSUFBSSxFQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLFNBQVMsRUFBRTtLQUN4RixDQUFDO0lBRUYsSUFBSSxDQUFDO1FBQ0gsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuRCxPQUFPO1lBQ0wsTUFBTSxFQUFFLEdBQUc7WUFDWCxlQUFlLEVBQUUsT0FBTyxDQUFDLGVBQWU7WUFDeEMsS0FBSyxFQUFFLElBQUk7U0FDWixDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sS0FBVSxFQUFFLENBQUM7UUFDcEIsT0FBTztZQUNMLE1BQU0sRUFBRSxHQUFHO1lBQ1gsZUFBZSxFQUFFLElBQUk7WUFDckIsS0FBSyxFQUFFLEtBQUssQ0FBQyxPQUFPO1NBQ3JCLENBQUM7SUFDSixDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBOUJXLFFBQUEsT0FBTyxXQThCbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV2ViMyBmcm9tIFwid2ViM1wiO1xuaW1wb3J0IGNvbnRyYWN0QWJpIGZyb20gJy4uL2FiaS9CcmlkZ2VUb3dlck5mdFVwZ3JhZGVhYmxlLmpzb24nO1xuXG5cbmNvbnN0IEFWQVhfUlBDX1VSTCA9IHByb2Nlc3MuZW52LkFWQVhfUlBDX1VSTCE7XG5jb25zdCBFVEhfUlBDX1VSTCA9IHByb2Nlc3MuZW52LkVUSF9SUENfVVJMITtcbmNvbnN0IFBSSVZBVEVfS0VZID0gcHJvY2Vzcy5lbnYuUFJJVkFURV9LRVkhO1xuY29uc3QgQ09OVFJBQ1RfQUJJID0gY29udHJhY3RBYmkuYWJpO1xuXG5jb25zdCB3ZWIzQXZheCA9IG5ldyBXZWIzKEFWQVhfUlBDX1VSTCk7XG5jb25zdCB3ZWIzRXRoID0gbmV3IFdlYjMoRVRIX1JQQ19VUkwpO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55LCBjb250ZXh0OiBhbnkpID0+IHtcbiAgY29uc3QgeyAgdG9BZGRyZXNzLCB0b2tlbklkcywgY2hhaW4sIGNvbnRyYWN0QWRkcmVzc30gPSBldmVudDtcbiAgY29uc3Qgd2ViMz1jaGFpbj09PSdBVkFYJz93ZWIzQXZheDp3ZWIzRXRoO1xuXG4gIGNvbnN0IGFjY291bnQgPSB3ZWIzLmV0aC5hY2NvdW50cy5wcml2YXRlS2V5VG9BY2NvdW50KFBSSVZBVEVfS0VZKTtcbiAgd2ViMy5ldGguYWNjb3VudHMud2FsbGV0LmFkZChhY2NvdW50KTtcblxuICBjb25zdCBjb250cmFjdCA9IG5ldyB3ZWIzLmV0aC5Db250cmFjdChDT05UUkFDVF9BQkksIGNvbnRyYWN0QWRkcmVzcyk7XG5cbiAgY29uc3QgdHggPSB7XG4gICAgZnJvbTogYWNjb3VudC5hZGRyZXNzLFxuICAgIHRvOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZ2FzOiAyMDAwMDAwLFxuICAgIGRhdGE6ICBjb250cmFjdC5tZXRob2RzLmJhdGNoVHJhbnNmZXIoYWNjb3VudC5hZGRyZXNzLCB0b0FkZHJlc3MsIHRva2VuSWRzKS5lbmNvZGVBQkkoKVxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHdlYjMuZXRoLnNlbmRUcmFuc2FjdGlvbih0eCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgdHJhbnNhY3Rpb25IYXNoOiByZWNlaXB0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIHRyYW5zYWN0aW9uSGFzaDogbnVsbCxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==