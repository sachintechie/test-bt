"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const web3_1 = __importDefault(require("web3"));
const BridgeTowerNftUpgradeable_json_1 = __importDefault(require("../abi/BridgeTowerNftUpgradeable.json"));
const AVAX_RPC_URL = process.env.AVAX_RPC_URL;
const ETH_RPC_URL = process.env.ETH_RPC_URL;
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const CONTRACT_ABI = BridgeTowerNftUpgradeable_json_1.default.abi;
const web3Avax = new web3_1.default(AVAX_RPC_URL);
const web3Eth = new web3_1.default(ETH_RPC_URL);
const handler = async (event, context) => {
    const { toAddress, tokenId, amount, chain, contractAddress } = event;
    const web3 = chain === 'AVAX' ? web3Avax : web3Eth;
    const account = web3.eth.accounts.privateKeyToAccount(PRIVATE_KEY);
    web3.eth.accounts.wallet.add(account);
    const contract = new web3.eth.Contract(CONTRACT_ABI, contractAddress);
    const tx = {
        from: account.address,
        to: contractAddress,
        gas: 2000000,
        data: contract.methods.safeTransferFrom(account.address, toAddress, tokenId, amount, undefined).encodeABI()
    };
    try {
        const receipt = await web3.eth.sendTransaction(tx);
        return {
            status: 200,
            transactionHash: receipt.transactionHash,
            error: null
        };
    }
    catch (error) {
        return {
            status: 500,
            transactionHash: null,
            error: error.message
        };
    }
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmZXJFUkMxMTU1LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsidHJhbnNmZXJFUkMxMTU1LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdEQUF3QjtBQUN4QiwyR0FBZ0U7QUFHaEUsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFhLENBQUM7QUFDL0MsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFZLENBQUM7QUFDN0MsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFZLENBQUM7QUFDN0MsTUFBTSxZQUFZLEdBQUcsd0NBQVcsQ0FBQyxHQUFHLENBQUM7QUFFckMsTUFBTSxRQUFRLEdBQUcsSUFBSSxjQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDeEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxjQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7QUFFL0IsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQVUsRUFBRSxPQUFZLEVBQUUsRUFBRTtJQUN4RCxNQUFNLEVBQUcsU0FBUyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLGVBQWUsRUFBRSxHQUFHLEtBQUssQ0FBQztJQUN0RSxNQUFNLElBQUksR0FBQyxLQUFLLEtBQUcsTUFBTSxDQUFBLENBQUMsQ0FBQSxRQUFRLENBQUEsQ0FBQyxDQUFBLE9BQU8sQ0FBQztJQUUzQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNuRSxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXRDLE1BQU0sUUFBUSxHQUFHLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBRXRFLE1BQU0sRUFBRSxHQUFHO1FBQ1QsSUFBSSxFQUFFLE9BQU8sQ0FBQyxPQUFPO1FBQ3JCLEVBQUUsRUFBRSxlQUFlO1FBQ25CLEdBQUcsRUFBRSxPQUFPO1FBQ1osSUFBSSxFQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxTQUFTLEVBQUU7S0FDN0csQ0FBQztJQUVGLElBQUksQ0FBQztRQUNILE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDbkQsT0FBTztZQUNMLE1BQU0sRUFBRSxHQUFHO1lBQ1gsZUFBZSxFQUFFLE9BQU8sQ0FBQyxlQUFlO1lBQ3hDLEtBQUssRUFBRSxJQUFJO1NBQ1osQ0FBQztJQUNKLENBQUM7SUFBQyxPQUFPLEtBQVUsRUFBRSxDQUFDO1FBQ3BCLE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRztZQUNYLGVBQWUsRUFBRSxJQUFJO1lBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsT0FBTztTQUNyQixDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQTlCVyxRQUFBLE9BQU8sV0E4QmxCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdlYjMgZnJvbSBcIndlYjNcIjtcbmltcG9ydCBjb250cmFjdEFiaSBmcm9tICcuLi9hYmkvQnJpZGdlVG93ZXJOZnRVcGdyYWRlYWJsZS5qc29uJztcblxuXG5jb25zdCBBVkFYX1JQQ19VUkwgPSBwcm9jZXNzLmVudi5BVkFYX1JQQ19VUkwhO1xuY29uc3QgRVRIX1JQQ19VUkwgPSBwcm9jZXNzLmVudi5FVEhfUlBDX1VSTCE7XG5jb25zdCBQUklWQVRFX0tFWSA9IHByb2Nlc3MuZW52LlBSSVZBVEVfS0VZITtcbmNvbnN0IENPTlRSQUNUX0FCSSA9IGNvbnRyYWN0QWJpLmFiaTtcblxuY29uc3Qgd2ViM0F2YXggPSBuZXcgV2ViMyhBVkFYX1JQQ19VUkwpO1xuY29uc3Qgd2ViM0V0aCA9IG5ldyBXZWIzKEVUSF9SUENfVVJMKTtcblxuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IGFueSwgY29udGV4dDogYW55KSA9PiB7XG4gIGNvbnN0IHsgIHRvQWRkcmVzcywgdG9rZW5JZCwgYW1vdW50LCBjaGFpbiwgY29udHJhY3RBZGRyZXNzIH0gPSBldmVudDtcbiAgY29uc3Qgd2ViMz1jaGFpbj09PSdBVkFYJz93ZWIzQXZheDp3ZWIzRXRoO1xuXG4gIGNvbnN0IGFjY291bnQgPSB3ZWIzLmV0aC5hY2NvdW50cy5wcml2YXRlS2V5VG9BY2NvdW50KFBSSVZBVEVfS0VZKTtcbiAgd2ViMy5ldGguYWNjb3VudHMud2FsbGV0LmFkZChhY2NvdW50KTtcblxuICBjb25zdCBjb250cmFjdCA9IG5ldyB3ZWIzLmV0aC5Db250cmFjdChDT05UUkFDVF9BQkksIGNvbnRyYWN0QWRkcmVzcyk7XG5cbiAgY29uc3QgdHggPSB7XG4gICAgZnJvbTogYWNjb3VudC5hZGRyZXNzLFxuICAgIHRvOiBjb250cmFjdEFkZHJlc3MsXG4gICAgZ2FzOiAyMDAwMDAwLFxuICAgIGRhdGE6ICBjb250cmFjdC5tZXRob2RzLnNhZmVUcmFuc2ZlckZyb20oYWNjb3VudC5hZGRyZXNzLCB0b0FkZHJlc3MsIHRva2VuSWQsIGFtb3VudCwgdW5kZWZpbmVkKS5lbmNvZGVBQkkoKVxuICB9O1xuXG4gIHRyeSB7XG4gICAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHdlYjMuZXRoLnNlbmRUcmFuc2FjdGlvbih0eCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXR1czogMjAwLFxuICAgICAgdHJhbnNhY3Rpb25IYXNoOiByZWNlaXB0LnRyYW5zYWN0aW9uSGFzaCxcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGF0dXM6IDUwMCxcbiAgICAgIHRyYW5zYWN0aW9uSGFzaDogbnVsbCxcbiAgICAgIGVycm9yOiBlcnJvci5tZXNzYWdlXG4gICAgfTtcbiAgfVxufTtcbiJdfQ==