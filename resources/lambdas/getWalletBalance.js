"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const dbFunctions_1 = require("../db/dbFunctions");
const solanaFunctions_1 = require("../solana/solanaFunctions");
const handler = async (event) => {
    try {
        console.log(event);
        const wallet = await getBalance(event.identity.resolverContext, event.arguments?.input?.walletAddress, event.arguments?.input?.symbol);
        return {
            status: 200,
            data: wallet,
            error: null
        };
    }
    catch (err) {
        console.log("In catch Block Error", err);
        return {
            status: 400,
            data: null,
            error: err
        };
    }
};
exports.handler = handler;
async function getBalance(tenant, walletAddress, symbol) {
    console.log("Wallet Address", walletAddress);
    try {
        const wallet = await (0, dbFunctions_1.getWalletAndTokenByWalletAddress)(walletAddress, tenant, symbol);
        let balance = 0;
        console.log(wallet, "Wallet");
        for (const token of wallet) {
            if (token.symbol === "SOL") {
                balance = await (0, solanaFunctions_1.getSolBalance)(walletAddress);
                token.balance = balance;
            }
            else {
                balance = await (0, solanaFunctions_1.getSplTokenBalance)(walletAddress, token.contractaddress ? token.contractaddress : "");
                token.balance = balance;
            }
        }
        return wallet;
    }
    catch (err) {
        console.log(err);
        throw err;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0V2FsbGV0QmFsYW5jZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdldFdhbGxldEJhbGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbURBQXFFO0FBQ3JFLCtEQUE4RTtBQUV2RSxNQUFNLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBVSxFQUFFLEVBQUU7SUFDMUMsSUFBSSxDQUFDO1FBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVuQixNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FDN0IsS0FBSyxDQUFDLFFBQVEsQ0FBQyxlQUF5QixFQUN4QyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxhQUFhLEVBQ3JDLEtBQUssQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FDL0IsQ0FBQztRQUNGLE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRztZQUNYLElBQUksRUFBRSxNQUFNO1lBQ1osS0FBSyxFQUFFLElBQUk7U0FDWixDQUFDO0lBQ0osQ0FBQztJQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLHNCQUFzQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRztZQUNYLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUMsQ0FBQztBQXRCVyxRQUFBLE9BQU8sV0FzQmxCO0FBRUYsS0FBSyxVQUFVLFVBQVUsQ0FBQyxNQUFjLEVBQUUsYUFBcUIsRUFBRSxNQUFjO0lBQzdFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFFN0MsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFBLDhDQUFnQyxFQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDckYsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzlCLEtBQUssTUFBTSxLQUFLLElBQUksTUFBTSxFQUFFLENBQUM7WUFDM0IsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRSxDQUFDO2dCQUMzQixPQUFPLEdBQUcsTUFBTSxJQUFBLCtCQUFhLEVBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQzdDLEtBQUssQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBQzFCLENBQUM7aUJBQU0sQ0FBQztnQkFDTixPQUFPLEdBQUcsTUFBTSxJQUFBLG9DQUFrQixFQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDdEcsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDMUIsQ0FBQztRQUNILENBQUM7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsTUFBTSxHQUFHLENBQUM7SUFDWixDQUFDO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRlbmFudCB9IGZyb20gXCIuLi9kYi9tb2RlbHNcIjtcbmltcG9ydCB7IGdldFdhbGxldEFuZFRva2VuQnlXYWxsZXRBZGRyZXNzIH0gZnJvbSBcIi4uL2RiL2RiRnVuY3Rpb25zXCI7XG5pbXBvcnQgeyBnZXRTb2xCYWxhbmNlLCBnZXRTcGxUb2tlbkJhbGFuY2UgfSBmcm9tIFwiLi4vc29sYW5hL3NvbGFuYUZ1bmN0aW9uc1wiO1xuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogYW55KSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coZXZlbnQpO1xuXG4gICAgY29uc3Qgd2FsbGV0ID0gYXdhaXQgZ2V0QmFsYW5jZShcbiAgICAgIGV2ZW50LmlkZW50aXR5LnJlc29sdmVyQ29udGV4dCBhcyB0ZW5hbnQsXG4gICAgICBldmVudC5hcmd1bWVudHM/LmlucHV0Py53YWxsZXRBZGRyZXNzLFxuICAgICAgZXZlbnQuYXJndW1lbnRzPy5pbnB1dD8uc3ltYm9sXG4gICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICBkYXRhOiB3YWxsZXQsXG4gICAgICBlcnJvcjogbnVsbFxuICAgIH07XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKFwiSW4gY2F0Y2ggQmxvY2sgRXJyb3JcIiwgZXJyKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgZXJyb3I6IGVyclxuICAgIH07XG4gIH1cbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGdldEJhbGFuY2UodGVuYW50OiB0ZW5hbnQsIHdhbGxldEFkZHJlc3M6IHN0cmluZywgc3ltYm9sOiBzdHJpbmcpIHtcbiAgY29uc29sZS5sb2coXCJXYWxsZXQgQWRkcmVzc1wiLCB3YWxsZXRBZGRyZXNzKTtcblxuICB0cnkge1xuICAgIGNvbnN0IHdhbGxldCA9IGF3YWl0IGdldFdhbGxldEFuZFRva2VuQnlXYWxsZXRBZGRyZXNzKHdhbGxldEFkZHJlc3MsIHRlbmFudCwgc3ltYm9sKTtcbiAgICBsZXQgYmFsYW5jZSA9IDA7XG4gICAgY29uc29sZS5sb2cod2FsbGV0LCBcIldhbGxldFwiKTtcbiAgICBmb3IgKGNvbnN0IHRva2VuIG9mIHdhbGxldCkge1xuICAgICAgaWYgKHRva2VuLnN5bWJvbCA9PT0gXCJTT0xcIikge1xuICAgICAgICBiYWxhbmNlID0gYXdhaXQgZ2V0U29sQmFsYW5jZSh3YWxsZXRBZGRyZXNzKTtcbiAgICAgICAgdG9rZW4uYmFsYW5jZSA9IGJhbGFuY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYWxhbmNlID0gYXdhaXQgZ2V0U3BsVG9rZW5CYWxhbmNlKHdhbGxldEFkZHJlc3MsIHRva2VuLmNvbnRyYWN0YWRkcmVzcyA/IHRva2VuLmNvbnRyYWN0YWRkcmVzcyA6IFwiXCIpO1xuICAgICAgICB0b2tlbi5iYWxhbmNlID0gYmFsYW5jZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHdhbGxldDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB0aHJvdyBlcnI7XG4gIH1cbn1cbiJdfQ==