type AddRefToKnowledgeBase {
	status: Int
	data: AddRefToKnowledgeBaseData
	error: AWSJSON
}

type AddRefToKnowledgeBaseData {
	id: String
	createdat: String
	depth: Int
	size: String
	ingested: Boolean
	reftype: String
	name: String
	url: String
	datasourceid: String
	ingestionjobid: String
	s3prestorehash: String
	s3prestoretxhash: String
	s3poststorehash: String
	s3poststoretxhash: String
	chaintype: String
	chainid: String
	projectid: String
	referencestage: String

}

input AddRefToKnowledgeBaseInput {
	refType: String!
	projectId: String!
	file: FileInput
	depth: Int
	websiteName: String
	websiteUrl: String
}

type AddSubAdmin {
	status: Int
	data: AddSubAdminData
	error: AWSJSON
}

type AddSubAdminData {
	id: String
	createdat: String
	tenantuserid: String
	tenantid: String
	emailid: String
}

input AddSubAdminInput {
	emailId: String!
	name: String!
	password: String!
}

input AdminRecipient {
	walletAddress: String
	amount: Float
}

type AdminTransfer {
	status: Int
	data: AdminTransferData
	error: AWSJSON
}

type AdminTransferData {
	adminuserid: String
	walletaddress: String
	receiverwalletaddress: String
	chaintype: String
	txhash: String
	symbol: String
	amount: Float
	createdat: String
	tokenid: String
	status: String
	transactionid: String
	network: String
	tenanttransactionid: String
}

input AdminTransferInput {
	senderWalletAddress: String!
	recipients: [AdminRecipient]!
	symbol: String!
	chainType: String!
	adminUserId: String!
	tenantTransactionId: String!
}

type AdminUserData {
	id: String
	createdat: String
	tenantuserid: String
	tenantid: String
	emailid: String
}

type AdminUserListData {
	total: Int
	totalPages: Int
	users: [AdminUserData]
}

type CategoryData {
	name: String!
	tenantid: String!
	createdat: AWSDateTime
	updatedat: AWSDateTime
}

type CategoryResponse {
	status: Int
	data: CategoryData
	error: AWSJSON
}

input CreateCategoryInput {
	categoryName: String!
}

input CreateProductInput {
	name: String!
	description: String
	type: String
	sku:  String
	categoryId: String!
	rarity: ProductRarity
	price: Float
	purchasedPercentage: Float
	isMintAble: Boolean
	chainType: String
	tokenType: String
	quantity: Int
	toAddress: String
	contractAddress: String
	metadata: AWSJSON
	tokenId: Int
}

input CreateProjectInput {
	name: String!
	description: String
	projectType: String!
	organizationId: String!
}

type CreateProjectResponse {
	status: Int
	data: ProjectData
	error: AWSJSON
}

input CreateWalletInput {
	tenantUserId: String!
	chainType: String!
}

input DeleteProductInput {
	productId: String
}

input GetAdminTransactionInput {
	tenantTransactionId: String!
}

type GetAdminWalletBalance {
	status: Int
	data: [GetAdminWalletBalanceData]
	error: AWSJSON
}

type GetAdminWalletBalanceData {
	walletaddress: String!
	symbol: String
	createdat: String
	chaintype: String
	contractaddress: String
	balance: Float
	tokenname: String
}

input GetAdminWalletBalanceInput {
	walletAddress: String!
	symbol: String
}

input GetCategoriesByTenantIdInput {
	tenantId: String
}

type GetCategoriesResponse {
	status: Int
	data: [CategoryData]
	error: AWSJSON
}

input GetCategoryByIdInput {
	categoryId: String
}

input GetProductAttributesByProductIdInput {
	productId: String!
}

type GetProductAttributesResponse {
	status: Int
	data: [ProductAttributeData]
	error: AWSJSON
}

input GetProductByIdInput {
	productId: String
}

input GetProductsByCategoryIdInput {
	categoryId: String
}

type GetProductsResponse {
    status: Int
    data: [ProductData]
    error: AWSJSON
    page: Int
    perPage: Int
    totalRecordsCount: Int
    totalPageCount: Int
}

type GetWallet {
	status: Int
	data: GetWalletData
	error: AWSJSON
}

type GetWalletData {
	customerid: String
	walletaddress: String
	createdat: String
	chaintype: String
	tenantuserid: String
	tenantid: String
	emailid: String
}

type ListAdminUsers {
	status: Int
	data: AdminUserListData
	error: AWSJSON
}

type ListProject {
	status: Int
	data: ListProjectData
	error: AWSJSON
}

type ListProjectData {
	total: Int
	totalPages: Int
	projects: [ProjectData]
}

input ListProjectInput {
	limit: Int!
	pageNo: Int!
	organizationId: String
}

type ListRefData {
	id: String
	createdat: String
	depth: Int
	size: String
	ingested: Boolean
	reftype: String
	name: String
	url: String
	datasourceid: String
	ingestionjobid: String
	s3prestorehash: String
	s3prestoretxhash: String
	s3poststorehash: String
	s3poststoretxhash: String
	chaintype: String
	chainid: String
}

input ListRefInput {
	limit: Int!
	pageNo: Int!
	refType: String
}

type ListReference {
	status: Int
	data: ListReferenceData
	error: AWSJSON
}

type ListReferenceData {
	total: Int
	totalPages: Int
	refs: [ListRefData]
}

input ListWalletTokenInput {
	walletAddress: String!
	limit: Int!
	pageNo: Int!
}

type ListWalletTransactions {
	status: Int
	data: TransactionListData
	error: AWSJSON
}

input PaginationInput {
	limit: Int!
	pageNo: Int!
}

type ProductAttributeData {
	id: String!
	key: String!
	value: String!
	type: String!
	productid: String!
	createdat: AWSDateTime
	updatedat: AWSDateTime
}

input ProductAttributeInput {
	key: String!
	value: String!
	type: String!
	productId: String!
}

type ProductAttributeResponse {
	status: Int
	data: ProductAttributeData
	error: AWSJSON
}

type ProductData {
	id: String!
	name: String!
	description: String
	type:String
	sku:String
	categoryid: String!
	rarity: ProductRarity
	price: Float
	status: ProductStatus
    tenantid: String
	isdeleted: Boolean
	purchasedpercentage: Float
	availablepercentage: Float
	category: CategoryData!
	createdat: AWSDateTime
	updatedat: AWSDateTime
	productattributes: [ProductAttributeData!]!
}

enum ProductRarity {
	NORMAL
	RARE
	EPIC
	LEGENDARY
	MYTHICAL
}

type ProductResponse {
	status: Int
	data: ProductData
	error: AWSJSON
}

enum ProductStatus {
	ACTIVE
	INACTIVE
}

type ProjectData {
	id: String
	createdat: String
	projecttype: String
	projectstage: String
	projectstatus: String
	organizationid: String
	name: String
	description: String
	isactive: Boolean
	createdby: String
}


input FileInput {
	fileName: String!
	fileContent: String!
	contentType: String!
}

type SignIn {
	status: Int
	data: SignInData
	error: AWSJSON
}

type SignInData {
	id: String
	createdat: String
	tenantuserid: String
	tenantid: String
	emailid: String
}

input SigninInput {
	tenantUserId: String!
}

type TransactionData {
	customerid: String
	walletaddress: String
	receiverwalletaddress: String
	chaintype: String
	txhash: String
	symbol: String
	amount: Float
	createdat: String
	tokenid: String
	tenantuserid: String
	status: String
	callbackstatus: String
	id: String
	network: String
	tenanttransactionid: String
}

type TransactionListData {
	total: Int
	totalPages: Int
	transactions: [TransactionData]
}

input UpdateCategoryInput {
	categoryId: String!
	categoryName: String!
}

type UpdateCategoryResponse {
	status: Int
	data: CategoryData
	error: AWSJSON
}

input UpdateProductAttributeInput {
	key: String!
	newValue: String!
	productId: String!
}

type UpdateProductAttributeResponse {
	status: Int
	data: ProductAttributeData
	error: AWSJSON
}

input UpdateProductInput {
	productId: String!
	productData: UpdateProductInputData!
}

input UpdateProductInputData {
	name: String
	description: String
	type: String
	sku:String
	categoryId: String
	rarity: ProductRarity
	price: Float
	purchasedPercentage: Float
}

type UpdateProductResponse {
	status: Int
	data: ProductData
	error: AWSJSON
}

input UpdateProductStatusInput {
	productId: String
	status: ProductStatus
}

input GetAdminProductsInput {
    page: Int
    perPage: Int
} 

input CreateInventoryInput {
  productId: String!
  inventoryId: String!
  inventoryCategory: String!
  price: Float!
  quantity: Int!
  ownershipNft: Boolean
  smartContractAddress: String
  tokenId: String
}

type CreateInventoryResponse {
  status: Int
  data: InventoryData
  error: AWSJSON
}

type InventoryData {
  id: String
  inventoryid: String
  productid: String
  product: ProductData
  inventorycategory: String
  price: Float
  quantity: Int
  ownershipnft: Boolean
  smartcontractaddress: String
  tokenid: String
  isdeleted: Boolean
  createdat: AWSDateTime
  updatedat: AWSDateTime
}

input GetInventoriesByProductIdInput {
	productId: String!
	page: Int
    perPage: Int
}

type GetInventoriesByProductIdIdResponse {
  status: Int
  data: [InventoryData]
  error: AWSJSON
  page: Int
  perPage: Int
  totalRecordsCount: Int
  totalPageCount: Int
}

input UpdateInventoryInput {
  inventoryId: String!
  inventoryData: UpdateInventoryData!
}

input UpdateInventoryData {
  inventoryCategory: String
  price: Float
  quantity: Int
  ownershipNft: Boolean
  smartContractAddress: String
  tokenId: String
}

type BulkImportResponse {
  status: Int
  data: String
  error: AWSJSON
}

 input BulkImportInput {
   file: FileInput!
 }

 input DeleteInventoryInput {
	inventoryId: String!
 }

 input SearchInventoryInput {
	inventoryId: String
	productName: String
 }

 input DeleteRefToKnowledgeBaseInput{
 refId: String!
 }

 input FilterInput {
   operator: String! 
   value: Float!
 }

 input FilterInventoryInputData {
   inventoryId: String
   productName: String
   price: FilterInput
   quantity: FilterInput
 }

 input FilterInventoryInput {
   filters: FilterInventoryInputData!
 }

type Mutation {
	AddSubAdmin(input: AddSubAdminInput): AddSubAdmin
	AddRefToKnowledgeBase(input: AddRefToKnowledgeBaseInput): AddRefToKnowledgeBase
	AdminTransfer(input: AdminTransferInput): AdminTransfer
	CreateTokenAccount(input: AdminTransferInput): AdminTransfer
	CreateCategory(input: CreateCategoryInput): CategoryResponse
	CreateProduct(input: CreateProductInput): ProductResponse
	CreateProductAttribute(input: ProductAttributeInput!): ProductAttributeResponse
	UpdateCategory(input: UpdateCategoryInput): UpdateCategoryResponse
	UpdateProduct(input: UpdateProductInput): UpdateProductResponse
	UpdateProductAttribute(input: UpdateProductAttributeInput): UpdateProductAttributeResponse
	UpdateProductStatus(input: UpdateProductStatusInput): ProductResponse
	DeleteProduct(input: DeleteProductInput): ProductResponse
	CreateInventory(input: CreateInventoryInput): CreateInventoryResponse
	UpdateInventory(input: UpdateInventoryInput): CreateInventoryResponse
	BulkImportInventory(input: BulkImportInput): BulkImportResponse
	BulkImportProduct(input: BulkImportInput): BulkImportResponse
	DeleteInventory(input: DeleteInventoryInput): CreateInventoryResponse
	DeleteRefToKnowledgeBase(input: DeleteRefToKnowledgeBaseInput): AddRefToKnowledgeBase
	CreateProject(input: CreateProjectInput): CreateProjectResponse

}

type Query {
	AdminSignin(input: SigninInput): SignIn
	CreateAdminWallet(input: CreateWalletInput): GetWallet
	ListWalletAdminTransactions(input: ListWalletTokenInput): ListWalletTransactions
	ListAdminUsers(input: PaginationInput): ListAdminUsers
	ListReference(input: ListRefInput): ListReference
	GetAdminTransactionById(input: GetAdminTransactionInput): ListWalletTransactions
	GetAdminWalletBalance(input: GetAdminWalletBalanceInput): GetAdminWalletBalance
    GetAdminProducts(input: GetAdminProductsInput): GetProductsResponse
	GetInventoriesByProductId(input: GetInventoriesByProductIdInput): GetInventoriesByProductIdIdResponse
	SearchInventory(input: SearchInventoryInput): CreateInventoryResponse
	FilterInventory(input: FilterInventoryInput): CreateInventoryResponse
	ListProject(input: ListProjectInput): ListProject
}

schema {
	query: Query
	mutation: Mutation
}