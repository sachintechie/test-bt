
type SignIn {
  status: Int
  data: SignInData
  error: AWSJSON
}

type SignInData {
  id: String
  createdat: String
  tenantuserid: String
  tenantid: String
  emailid: String
}


input SigninInput {
  tenantUserId: String!
}


type AdminTransfer {
  status: Int
  data: AdminTransferData
  error: AWSJSON
}

type AdminTransferData {
  adminuserid: String
  walletaddress: String
  receiverwalletaddress: String
  chaintype: String
  txhash: String
  symbol: String
  amount: Float
  createdat: String
  tokenid: String
  status: String
  transactionid: String
  network: String
  tenanttransactionid: String
}



input AdminTransferInput {
  senderWalletAddress: String!
  recipients: [AdminRecipient]!
  symbol: String!
  chainType: String!
  adminUserId: String!
  tenantTransactionId: String!
}

input CreateWalletInput {
  tenantUserId: String!
  chainType: String!
}

type GetWallet {
  status: Int
  data: GetWalletData
  error: AWSJSON
}

type GetWalletData {
  customerid: String
  walletaddress: String
  createdat: String
  chaintype: String
  tenantuserid: String
  tenantid: String
  emailid: String
}

input AdminRecipient {
  walletAddress: String
  amount: Float
}


type ListWalletTransactions {
  status: Int
  data: [TransactionListData]
  error: AWSJSON
}

type TransactionListData{
total : Int
transactions : [TransactionData]
}

type TransactionData {
  customerid: String
  walletaddress: String
  receiverwalletaddress: String
  chaintype: String
  txhash: String
  symbol: String
  amount: Float
  createdat: String
  tokenid: String
  tenantuserid: String
  status: String
  callbackstatus: String
  id: String
  network: String
  tenanttransactionid: String
}
input ListWalletTokenInput {
  walletAddress: String!,
  limit: Int!,
  pageNo: Int!,
}

input GetAdminTransactionInput {
tenantTransactionId: String!
}

input GetAdminWalletBalanceInput {
  walletAddress: String!
  symbol: String
}

type GetAdminWalletBalance {
  status: Int
  data: [GetAdminWalletBalanceData]
  error: AWSJSON
}

type GetAdminWalletBalanceData {
  walletaddress: String!
  symbol: String
  createdat: String
  chaintype: String
  contractaddress: String
  balance: Float
  tokenname: String
}

input CreateCategoryInput {
  categoryName: String!
}

type CategoryResponse {
  status: Int
  data: CategoryData
  error: AWSJSON
}

type CategoryData {
  name: String!
  tenantid: String!
  createdat: String
  updatedat: String
}

enum ProductRarity {
  NORMAL
  RARE
  EPIC
  LEGENDARY
  MYTHICAL
}

input CreateProductInput {
  name: String!
  categoryId: String!
  rarity: ProductRarity
  price: Float
  purchasedPercentage: Float
}

 type ProductResponse {
  status: Int
  data: ProductData
  error: AWSJSON
}

type ProductData {
  id: String!
  name: String!
  categoryid: String!
  rarity: ProductRarity
  price: Float
  purchasedpercentage: Float
  availablepercentage: Float
  category: CategoryData!
  createdat: String
  updatedat: String
  productattributes: [ProductAttributeData!]!
}

input ProductAttributeInput {
  key: String!
  value: String!
  type: String!
  productId: String!
}

type ProductAttributeResponse {
  status: Int
  data: ProductAttributeData
  error: AWSJSON
}

type ProductAttributeData {
  id: String!
  key: String!
  value: String!
  type: String!
  productid: String!
  createdat: String
  updatedat: String
}

input UpdateCategoryInput {
	categoryId: String!
	categoryName: String!
}

type UpdateCategoryResponse {
  status: Int
  data: UpdateCategoryData
  error: AWSJSON
}

type UpdateCategoryData {
  name: String
  tenantid: String
  createdat: String
  updatedat: String
}

input UpdateProductInput {
  productId: String!
  productData: UpdateProductInputData!
}

input UpdateProductInputData {
  name: String
  categoryId: String
  rarity: ProductRarity
  price: Float
  purchasedPercentage: Float
}

 type UpdateProductResponse {
  status: Int
  data: ProductData
  error: AWSJSON
}

input UpdateProductAttributeInput {
  key: String!
  newValue: String!
  productId: String!
}

type UpdateProductAttributeResponse {
  status: Int
  data:ProductAttributeData
  error: AWSJSON
}


type Query {
  AdminSignin(input: SigninInput): SignIn
  CreateAdminWallet(input: CreateWalletInput): GetWallet
  ListWalletAdminTransactions(input: ListWalletTokenInput): ListWalletTransactions
  GetAdminTransactionById(input: GetAdminTransactionInput): ListWalletTransactions
  GetAdminWalletBalance(input: GetAdminWalletBalanceInput): GetAdminWalletBalance

}

type Mutation {
  AdminTransfer(input: AdminTransferInput): AdminTransfer
  CreateTokenAccount(input: AdminTransferInput): AdminTransfer
  CreateCategory(input: CreateCategoryInput): CategoryResponse
  CreateProduct(input: CreateProductInput): ProductResponse
  CreateProductAttribute(input: ProductAttributeInput!): ProductAttributeResponse
  UpdateCategory(input: UpdateCategoryInput): UpdateCategoryResponse
  UpdateProduct(input: UpdateProductInput): UpdateProductResponse
  UpdateProductAttribute(input: UpdateProductAttributeInput): UpdateProductAttributeResponse
}

schema {
  query: Query
  mutation: Mutation
}
