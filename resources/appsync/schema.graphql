input AddProductToCollectionInput {
  productId: String
  collectionId: String
}

input CreateCollectionInput {
  title: String
  description: String
}

input AddReviewInput {
  productId: String
  orderId: String
  comment: String
  rating: Float
}

type AddReviewResponse {
  status: Int
  data: ReviewData
  error: AWSJSON
}

type BatchMintCnft {
  status: Int
  data: BatchMintCnftData
  error: AWSJSON
}

type BatchMintCnftData {
  transactionHash: [String]
}

type CategoryData {
  id: String!
  name: String!
  tenantid: String!
  createdat: AWSDateTime
  updatedat: AWSDateTime
}

type CollectionData {
  id: String
  title: String
  description: String
  customerid: String
  productid: String
  createdat: AWSDateTime
  updatedat: AWSDateTime
}

input CreateOrderInput {
  sellerId: String!
  productId: String!
  price: Float!
  quantity: Int!
  status: OrderStatus
}

type CreateOrderResponse {
  status: Int
  data: OrderData
  error: AWSJSON
}

input CreateWalletInput {
  tenantUserId: String!
  chainType: String!
}

type CustomerAndWalletCountData {
  wallet: Int
}

type CustomerAndWalletCounts {
  status: Int
  data: CustomerAndWalletCountData
  error: AWSJSON
}

type CustomerData {
  emailid: String
  name: String
  isactive: Boolean
  usertype: String
  iss: String
}

type CustomerKyc {
  status: Int
  data: CustomerKycData
  error: AWSJSON
}

type CustomerKycData {
  id: String
  createdat: String
  status: String
  customerid: String
  type: String
  kycid: String
  kyctype: String
}

input CustomerKycInput {
  customerId: String!
}

input EmailSigninInput {
  tenantUserId: String!
  emailid: String!
}

enum FilterOperator {
  gt
  lt
  gte
  lte
  eq
}

type FilterProductData {
  id: String!
  name: String!
  categoryid: String
  rarity: ProductRarity
  price: Float
  purchasedpercentage: Float
  availablepercentage: Float
  status: ProductStatus
  isdeleted: Boolean
  category: CategoryData
  createdat: AWSDateTime
  updatedat: AWSDateTime
  productattributes: [ProductAttributeData!]!
}

input FilterProductInput {
  filters: [ProductFilter]
}

type FilterProductResponse {
  status: Int
  data: [FilterProductData]
  error: AWSJSON
}

type GetCategoriesResponse {
  status: Int
  data: [CategoryData]
  error: AWSJSON
}

type GetCubistOrg {
  wallets: Int
  users: Int
}

type GetCubistOrgData {
  status: Int
  data: GetCubistOrg
  error: AWSJSON
}

type GetKycAccessToken {
  status: Int
  data: GetKycAccessTokenData
  error: AWSJSON
}

type GetKycAccessTokenData {
  token: String
  customerId: String
}

type GetKycApplicant {
  status: Int
  data: CustomerKycData
  error: AWSJSON
}

input GetKycApplicantInput {
  customerId: String!
  levelName: String!
}

type GetListWalletTokens {
  customerid: String!
  walletaddress: String!
  symbol: String
  createdat: String
  chaintype: String
  contractaddress: String
  tokenname: String
}

input GetMetadataInput {
  contractAddress: String!
  tokenId: Int!
}

type GetMetadataResponse {
  status: Int
  message: String
  metadata: AWSJSON
}

input GetProductAttributesByProductIdInput {
  productId: String!
}

type GetProductAttributesResponse {
  status: Int
  data: [ProductAttributeData]
  error: AWSJSON
}

type GetProductsResponse {
  status: Int
  data: [ProductData]
  error: AWSJSON
}

input GetTransactionInput {
  chainType: String!
  transactionHash: String!
}

type GetWallet {
  status: Int
  data: GetWalletData
  error: AWSJSON
}

input GetWalletAuthTypeInput {
  tenantUserId: String!
  chainType: String!
  authType: String
}

type GetWalletBalance {
  status: Int
  data: [GetWalletBalanceData]
  error: AWSJSON
}

type GetWalletBalanceData {
  customerid: String!
  walletaddress: String!
  symbol: String
  createdat: String
  chaintype: String
  contractaddress: String
  balance: Float
  tokenname: String
}

input GetWalletBalanceInput {
  walletAddress: String!
  symbol: String
}

type GetWalletData {
  customerid: String
  walletaddress: String
  createdat: String
  chaintype: String
  tenantuserid: String
  tenantid: String
  emailid: String
}

input GetWalletInput {
  tenantUserId: String!
  chainType: String!
}

type GetWishlistByCusotmerIdData {
  customerid: String!
  product: [ProductData]
  productid: String
  createdat: AWSDateTime
}

type GetWishlistByCusotmerIdResponse {
  status: Int
  data: [GetWishlistByCusotmerIdData]
  error: AWSJSON
}

input KycAccessTokenInput {
  customerId: String!
  levelName: String!
}

type KycReview {
  reviewStatus: String
  createDate: String
  attemptId: String
  levelName: String
  reviewId: String
  priority: String
}

type ListCustomerWallets {
  status: Int
  data: [ListCustomerWalletsData]
  error: AWSJSON
}

type ListCustomerWalletsData {
  customerid: String
  walletaddress: String
  symbol: String
  createdat: String
  chaintype: String
  wallettype: String
}

input ListCustomerWalletsInput {
  customerId: String!
}

input ListStakeAccountInput {
  walletAddress: String!
}

type ListStakeAccounts {
  status: Int
  data: [StakeAccountData]
  error: AWSJSON
}

input ListStakeTransactionInput {
  stakeAccountId: String!
}

type ListStakeTransactions {
  status: Int
  data: [StakeTransactionData]
  error: AWSJSON
}

input ListWalletTokenInput {
  walletAddress: String!
}

type ListWalletTokens {
  status: Int
  data: [GetWalletBalanceData]
  error: AWSJSON
}

type ListWalletTransactions {
  status: Int
  data: [TransactionData]
  error: AWSJSON
}

input MasterTransferInput {
  senderWalletAddress: String!
  amount: Float
  symbol: String!
  chainType: String!
  tenantUserId: String!
  tenantTransactionId: String!
}

input MergeStakeInput {
  senderWalletAddress: String!
}

input MintCnftInput {
  receiverWalletAddress: [String]!
  amount: Float
  symbol: String!
  chainType: String!
}

input MintERC1155Input {
  toAddress: String!
  ids: [Int!]
  amounts: [Int!]
  chain: String!
  contractAddress: String!
  metadata: AWSJSON
}

input MintNFTInput {
  toAddress: String!
  numberOfTokens: Int!
  chain: String!
  contractAddress: String!
  metadata: AWSJSON
}

type OrderData {
  sellerid: String
  buyerid: String
  productid: String
  price: Float
  quantity: Int
  status: OrderStatus
  createdat: AWSDateTime
  updatedat: AWSDateTime
}

enum OrderStatus {
  CREATED
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  DISPUTED
}

type ProductAttributeData {
  id: String!
  key: String!
  value: String!
  type: String!
  productid: String!
  createdat: AWSDateTime
  updatedat: AWSDateTime
}

type ProductData {
  id: String!
  name: String!
  categoryid: String!
  rarity: ProductRarity
  price: Float
  status: ProductStatus
  tenantid: String
  isdeleted: Boolean
  purchasedpercentage: Float
  availablepercentage: Float
  category: CategoryData!
  createdat: AWSDateTime
  updatedat: AWSDateTime
  productattributes: [ProductAttributeData!]!
}

input ProductFilter {
  key: String
  operator: FilterOperator
  value: String
}

enum ProductRarity {
  NORMAL
  RARE
  EPIC
  LEGENDARY
  MYTHICAL
}

type ProductToCollectionResponse {
  status: Int
  data: [CollectionData]
  error: AWSJSON
}

type ProductToCollectionUniqueResponse {
  status: Int
  data: CollectionData
  error: AWSJSON
}

input RemoveProductFromCollectionInput {
  collectionId: String
  productId: String
}

type ReviewData {
  id: String
  comment: String
  rating: Float
  customerid: String
  productid: String
  orderid: String
  createdat: AWSDateTime
  updatedat: AWSDateTime
}

type ReviewResponse {
  status: Int
  data: [ReviewData]
  error: AWSJSON
}

type SignIn {
  status: Int
  data: SignInData
  error: AWSJSON
}

type SignInData {
  id: String
  createdat: String
  tenantuserid: String
  tenantid: String
  emailid: String
}

input SigninInput {
  tenantUserId: String!
}

type StakeAccountData {
  customerid: String
  walletaddress: String
  chaintype: String
  validatornodeaddress: String
  symbol: String
  amount: Float
  createdat: String
  updatedat: String
  lockupexpirationtimestamp: String
  tenantuserid: String
  status: String
  stakeaccountpubkey: String
  network: String
  tenanttransactionid: String
  id: String
}

type StakeTransactionData {
  customerid: String
  walletaddress: String
  receiverwalletaddress: String
  chaintype: String
  txhash: String
  symbol: String
  amount: Float
  createdat: String
  tokenid: String
  tenantuserid: String
  status: String
  type: String
  transactionid: String
  network: String
  tenanttransactionid: String
  stakeaccountid: String
}

type Staking {
  status: Int
  data: StakingData
  error: AWSJSON
}

type StakingData {
  customerid: String
  walletaddress: String
  receiverwalletaddress: String
  chaintype: String
  txhash: String
  symbol: String
  amount: Float
  createdat: String
  tokenid: String
  tenantuserid: String
  status: String
  transactionid: String
  network: String
  tenanttransactionid: String
  stakeaccountid: String
  type: String
}

input StakingInput {
  senderWalletAddress: String!
  amount: Float
  symbol: String!
  chainType: String!
  tenantUserId: String!
  tenantTransactionId: String!
  lockupExpirationTimestamp: String
}

type StoreHash {
  status: Int
  data: StoreHashData
  error: AWSJSON
}

type StoreHashData {
  message: String
  transactionId: String
  hash: String
  metaData: String
  blockHash: String
  type: String
  blockNumber: String
  confirmations: String
  from: String
  to: String
  status: String
  gas: String
  nonce: String
  chainId: String
  gasLimit: String
  gasPrice: String
  timestamp: String
}

input StoreHashInput {
  chainType: String!
  hash: String!
}

type TransactionData {
  customerid: String
  walletaddress: String
  receiverwalletaddress: String
  chaintype: String
  txhash: String
  symbol: String
  amount: Float
  createdat: String
  tokenid: String
  tenantuserid: String
  status: String
  callbackstatus: String
  id: String
  network: String
  tenanttransactionid: String
}

type TransactionResponse {
  status: Int
  transactionHash: String
  error: String
}

type Transfer {
  status: Int
  data: TransferData
  error: AWSJSON
}

type TransferData {
  customerid: String
  walletaddress: String
  receiverwalletaddress: String
  chaintype: String
  txhash: String
  symbol: String
  amount: Float
  createdat: String
  tokenid: String
  tenantuserid: String
  status: String
  transactionid: String
  network: String
  tenanttransactionid: String
}

input TransferERC1155Input {
  toAddress: String!
  tokenId: Int!
  amount: Int!
  chain: String!
  contractAddress: String!
}

input TransferInput {
  senderWalletAddress: String!
  receiverWalletAddress: String!
  amount: Float
  symbol: String!
  chainType: String!
  tenantUserId: String!
  tenantTransactionId: String!
}

input TransferNFTInput {
  toAddress: String!
  tokenIds: [Int!]
  chain: String!
  contractAddress: String!
}

input UnStakingInput {
  stakeAccountId: String!
  amount: Float!
  chainType: String!
}

input UpdateMetadataInput {
  contractAddress: String!
  tokenId: Int!
  updates: AWSJSON!
}

type UpdateMetadataResponse {
  status: Int
  message: String
  modifiedMetadata: AWSJSON!
}

type UpdateOrderStatusData {
  sellerid: String
  buyerid: String
  productid: String
  status: OrderStatus
  updatedat: AWSDateTime
}

input UpdateOrderStatusInput {
  orderId: String!
  status: OrderStatus!
}

type UpdateOrderStatusResponse {
  status: Int
  data: UpdateOrderStatusResponseData
  error: AWSJSON
}

type UpdateOrderStatusResponseData {
  message: String
  order: UpdateOrderStatusData
}

type Web3TransactionResponse {
  status: Int
  transactionHash: String
  error: String
}

type GetStripeProductsResponse {
  status: Int
  data: AWSJSON
  error: AWSJSON
}

type GetStripeCheckoutResponse {
  status: Int
  url: String
  error: AWSJSON
}

type GetStripePaymentIntentClientSecretResponse {
  status: Int
  data: String
  error: AWSJSON
}

type WishlistData {
  customerid: String!
  productid: String!
  createdat: AWSDateTime
}

input WishlistInput {
  productId: String!
}

type WishlistResponse {
  status: Int
  data: WishlistData
  error: AWSJSON
}

type WithdrawStake {
  status: Int
  error: AWSJSON
}

input WithdrawStakeInput {
  senderWalletAddress: String!
  accountPublicKey: String!
}

input ProductSearchInput {
  name: String!
}
enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum ProductFindBy {
  PRODUCT
  CATEGORY
  TENANT
}

input GetProductsInput {
  value: String
  searchBy: ProductFindBy
  status: ProductStatus
}

input GetStripeProductsInput {
  limit: Int!
}

input GetStripeCheckoutLinkInput {
  successLink: String!
  failedLink: String!
  items: AWSJSON
  walletAddress: String!
}

input GetStripePaymentIntentClientSecretInput {
  cart: AWSJSON
  address: String!
}

enum ReviewsFindBy {
  PRODUCT
  CUSTOMER
}

input GetReviewsInput {
  value: String
  searchBy: ReviewsFindBy
}

input GetCategoriesInput {
  value: String
  searchBy: CategoryFindBy
}

enum CategoryFindBy {
  CATEGORY
  TENANT
}

enum CollectionFindBy {
  COLLECTION
  CUSTOMER
}

enum OrderFindBy {
  ORDER
  TENANT
  BUYER 
  SELLER
  PRODUCT
}

input GetCollectionByIdInput {
  value: String
  searchBy: CollectionFindBy
}

input GetOrdersInput {
  value: String
  searchBy: OrderFindBy
  status: OrderStatus
}

type GetOrdersResponse {
  status: Int
  data: [GetOrdersData]
  error: AWSJSON
}

type GetOrdersData {
  seller: CustomerData
  buyer: CustomerData
  product: ProductData
  price: Float
  quantity: Int
  status: OrderStatus
  createdat: AWSDateTime
  updatedat: AWSDateTime
}
type Mutation {
  CreateWallet(input: CreateWalletInput): GetWallet
  Unstaking(input: UnStakingInput): Staking
  MergeStake(input: MergeStakeInput): ListStakeAccounts
  WithdrawStake(input: WithdrawStakeInput): WithdrawStake
  BatchMintCnft(input: MintCnftInput): BatchMintCnft
  AddToWishlist(input: WishlistInput): WishlistResponse
  RemoveFromWishlist(input: WishlistInput): WishlistResponse
  CreateOrder(input: CreateOrderInput): CreateOrderResponse
  UpdateOrderStatus(input: UpdateOrderStatusInput): UpdateOrderStatusResponse
  AddReview(input: AddReviewInput): AddReviewResponse
  CreateCollection(input: CreateCollectionInput): ProductToCollectionUniqueResponse
  AddProductToCollection(input: AddProductToCollectionInput): ProductToCollectionUniqueResponse
  RemoveProductFromCollection(input: RemoveProductFromCollectionInput): ProductToCollectionUniqueResponse
  StoreHash(input: StoreHashInput): StoreHash
  StoreHashOnSubnet(input: StoreHashInput): StoreHash
}

type Query {
  GetKycAccessToken(input: KycAccessTokenInput): GetKycAccessToken
  GetKycApplicant(input: GetKycApplicantInput): GetKycApplicant
  GetWallet(input: GetWalletInput): GetWallet
  GetWalletByAuthType(input: GetWalletAuthTypeInput): GetWallet
  GetWalletBalance(input: GetWalletBalanceInput): GetWalletBalance
  CustomerKyc(input: CustomerKycInput): CustomerKyc
  KycWebhook(input: AWSJSON): AWSJSON
  ListCustomerWallets(input: ListCustomerWalletsInput): ListCustomerWallets
  ListStakeAccounts(input: ListStakeAccountInput): ListStakeAccounts
  ListStakeTransactions(input: ListStakeTransactionInput): ListStakeTransactions
  ListWalletTokens(input: ListWalletTokenInput): ListWalletTokens
  ListWalletTransactions(input: ListWalletTokenInput): ListWalletTransactions
  CustomerAndWalletCounts: CustomerAndWalletCounts
  GetCubistOrgData: GetCubistOrgData
  MasterTransfer(input: MasterTransferInput): Transfer
  Signin: SignIn
  Staking(input: StakingInput): Staking
  Transfer(input: TransferInput): Transfer
  SendEmailOtpSignin(input: EmailSigninInput): SignIn
  EmailOtpSignin(input: GetWalletInput): GetWallet
  MintNFT(input: MintNFTInput): Web3TransactionResponse
  MintERC1155(input: MintERC1155Input): Web3TransactionResponse
  TransferNFT(input: TransferNFTInput): Web3TransactionResponse
  TransferERC1155(input: TransferERC1155Input): Web3TransactionResponse
  UpdateMetadata(input: UpdateMetadataInput): UpdateMetadataResponse
  GetMetadata(input: GetMetadataInput): GetMetadataResponse
  GetCategories(input: GetCategoriesInput): GetCategoriesResponse
  GetProducts(input: GetProductsInput): GetProductsResponse
  GetProductAttributesByProductId(input: GetProductAttributesByProductIdInput!): GetProductAttributesResponse
  FilterProducts(input: FilterProductInput): FilterProductResponse
  GetWishlistByCustomerId: GetWishlistByCusotmerIdResponse
  GetOrders(input: GetOrdersInput) : GetOrdersResponse
  GetReviews(input: GetReviewsInput): ReviewResponse
  GetCollectionById(input: GetCollectionByIdInput): ProductToCollectionResponse
  GetHashTransaction(input: GetTransactionInput): StoreHash
  SearchProductsByName(input: ProductSearchInput): GetProductsResponse
  GetStripeProducts(input: GetStripeProductsInput): GetStripeProductsResponse
  GetStripeCheckoutLink(input: GetStripeCheckoutLinkInput): GetStripeCheckoutResponse
  GetStripePaymentIntentClientSecret(input: GetStripePaymentIntentClientSecretInput): GetStripePaymentIntentClientSecretResponse
}

schema {
  query: Query
  mutation: Mutation
}
