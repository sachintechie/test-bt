"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDatabaseUrl = getDatabaseUrl;
exports.executeQuery = executeQuery;
const pg_1 = require("pg");
const aws_sdk_1 = require("aws-sdk");
const region = "us-east-1";
const client = new aws_sdk_1.SecretsManager({ region: region });
const dbConfig = {
    host: process.env["DB_HOST"],
    database: process.env["DB_DATABASE"],
    port: parseInt(process.env["DB_PORT"])
};
const secretName = process.env["SECRET_NAME"];
async function getDatabaseUrl() {
    const dbSecretString = await getSecretValue(secretName);
    const dbSecret = JSON.parse(dbSecretString);
    dbConfig.user = dbSecret.username;
    dbConfig.password = dbSecret.password;
    // url encode the password
    dbConfig.password = encodeURIComponent(dbConfig.password);
    return `postgresql://${dbConfig.user}:${dbConfig.password}@${dbConfig.host}:${dbConfig.port}/${dbConfig.database}`;
}
async function executeQuery(query) {
    const dbSecretString = await getSecretValue(secretName);
    const dbSecret = JSON.parse(dbSecretString);
    dbConfig.user = dbSecret.username;
    dbConfig.password = dbSecret.password;
    const client = new pg_1.Client(dbConfig);
    try {
        await client.connect();
        const result = await client.query(query);
        return result;
    }
    catch (e) {
        throw e;
    }
    finally {
        await client.end();
    }
}
async function getSecretValue(secretName) {
    try {
        const data = await client.getSecretValue({ SecretId: secretName }).promise();
        if ("SecretString" in data) {
            return data.SecretString;
        }
        else {
            let buff = Buffer.from(data.SecretBinary, "base64");
            return buff.toString("ascii");
        }
    }
    catch (err) {
        console.log(err);
        return err;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGdDbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQZ0NsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQWFBLHdDQVFDO0FBQ0Qsb0NBZ0JDO0FBdENELDJCQUE0QjtBQUM1QixxQ0FBeUM7QUFFekMsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDO0FBRTNCLE1BQU0sTUFBTSxHQUFHLElBQUksd0JBQWMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ3RELE1BQU0sUUFBUSxHQUFRO0lBQ3BCLElBQUksRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBRTtJQUM3QixRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUU7SUFDckMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBRSxDQUFDO0NBQ3hDLENBQUM7QUFDRixNQUFNLFVBQVUsR0FBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBRSxDQUFDO0FBRXZDLEtBQUssVUFBVSxjQUFjO0lBQ2xDLE1BQU0sY0FBYyxHQUFRLE1BQU0sY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUMsUUFBUSxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDO0lBQ2xDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUN0QywwQkFBMEI7SUFDMUIsUUFBUSxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUQsT0FBTyxnQkFBZ0IsUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDckgsQ0FBQztBQUNNLEtBQUssVUFBVSxZQUFZLENBQUMsS0FBYTtJQUM5QyxNQUFNLGNBQWMsR0FBUSxNQUFNLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUM3RCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQzVDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUNsQyxRQUFRLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7SUFDdEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxXQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFcEMsSUFBSSxDQUFDO1FBQ0gsTUFBTSxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDdkIsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ1gsTUFBTSxDQUFDLENBQUM7SUFDVixDQUFDO1lBQVMsQ0FBQztRQUNULE1BQU0sTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7QUFDSCxDQUFDO0FBRUQsS0FBSyxVQUFVLGNBQWMsQ0FBQyxVQUFrQjtJQUM5QyxJQUFJLENBQUM7UUFDSCxNQUFNLElBQUksR0FBRyxNQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3RSxJQUFJLGNBQWMsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUMzQixPQUFPLElBQUksQ0FBQyxZQUFzQixDQUFDO1FBQ3JDLENBQUM7YUFBTSxDQUFDO1lBQ04sSUFBSSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBc0IsRUFBRSxRQUFRLENBQUMsQ0FBQztZQUM5RCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEMsQ0FBQztJQUNILENBQUM7SUFBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50IH0gZnJvbSBcInBnXCI7XG5pbXBvcnQgeyBTZWNyZXRzTWFuYWdlciB9IGZyb20gXCJhd3Mtc2RrXCI7XG5cbmNvbnN0IHJlZ2lvbiA9IFwidXMtZWFzdC0xXCI7XG5cbmNvbnN0IGNsaWVudCA9IG5ldyBTZWNyZXRzTWFuYWdlcih7IHJlZ2lvbjogcmVnaW9uIH0pO1xuY29uc3QgZGJDb25maWc6IGFueSA9IHtcbiAgaG9zdDogcHJvY2Vzcy5lbnZbXCJEQl9IT1NUXCJdISxcbiAgZGF0YWJhc2U6IHByb2Nlc3MuZW52W1wiREJfREFUQUJBU0VcIl0hLFxuICBwb3J0OiBwYXJzZUludChwcm9jZXNzLmVudltcIkRCX1BPUlRcIl0hKVxufTtcbmNvbnN0IHNlY3JldE5hbWUgPXByb2Nlc3MuZW52W1wiU0VDUkVUX05BTUVcIl0hO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RGF0YWJhc2VVcmwoKSB7XG4gIGNvbnN0IGRiU2VjcmV0U3RyaW5nOiBhbnkgPSBhd2FpdCBnZXRTZWNyZXRWYWx1ZShzZWNyZXROYW1lKTtcbiAgY29uc3QgZGJTZWNyZXQgPSBKU09OLnBhcnNlKGRiU2VjcmV0U3RyaW5nKTtcbiAgZGJDb25maWcudXNlciA9IGRiU2VjcmV0LnVzZXJuYW1lO1xuICBkYkNvbmZpZy5wYXNzd29yZCA9IGRiU2VjcmV0LnBhc3N3b3JkO1xuICAvLyB1cmwgZW5jb2RlIHRoZSBwYXNzd29yZFxuICBkYkNvbmZpZy5wYXNzd29yZCA9IGVuY29kZVVSSUNvbXBvbmVudChkYkNvbmZpZy5wYXNzd29yZCk7XG4gIHJldHVybiBgcG9zdGdyZXNxbDovLyR7ZGJDb25maWcudXNlcn06JHtkYkNvbmZpZy5wYXNzd29yZH1AJHtkYkNvbmZpZy5ob3N0fToke2RiQ29uZmlnLnBvcnR9LyR7ZGJDb25maWcuZGF0YWJhc2V9YDtcbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBleGVjdXRlUXVlcnkocXVlcnk6IHN0cmluZykge1xuICBjb25zdCBkYlNlY3JldFN0cmluZzogYW55ID0gYXdhaXQgZ2V0U2VjcmV0VmFsdWUoc2VjcmV0TmFtZSk7XG4gIGNvbnN0IGRiU2VjcmV0ID0gSlNPTi5wYXJzZShkYlNlY3JldFN0cmluZyk7XG4gIGRiQ29uZmlnLnVzZXIgPSBkYlNlY3JldC51c2VybmFtZTtcbiAgZGJDb25maWcucGFzc3dvcmQgPSBkYlNlY3JldC5wYXNzd29yZDtcbiAgY29uc3QgY2xpZW50ID0gbmV3IENsaWVudChkYkNvbmZpZyk7XG5cbiAgdHJ5IHtcbiAgICBhd2FpdCBjbGllbnQuY29ubmVjdCgpO1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNsaWVudC5xdWVyeShxdWVyeSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IGU7XG4gIH0gZmluYWxseSB7XG4gICAgYXdhaXQgY2xpZW50LmVuZCgpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNlY3JldFZhbHVlKHNlY3JldE5hbWU6IHN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBjbGllbnQuZ2V0U2VjcmV0VmFsdWUoeyBTZWNyZXRJZDogc2VjcmV0TmFtZSB9KS5wcm9taXNlKCk7XG4gICAgaWYgKFwiU2VjcmV0U3RyaW5nXCIgaW4gZGF0YSkge1xuICAgICAgcmV0dXJuIGRhdGEuU2VjcmV0U3RyaW5nIGFzIHN0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGJ1ZmYgPSBCdWZmZXIuZnJvbShkYXRhLlNlY3JldEJpbmFyeSBhcyBzdHJpbmcsIFwiYmFzZTY0XCIpO1xuICAgICAgcmV0dXJuIGJ1ZmYudG9TdHJpbmcoXCJhc2NpaVwiKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgcmV0dXJuIGVycjtcbiAgfVxufVxuIl19