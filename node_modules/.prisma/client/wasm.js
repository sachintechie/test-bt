
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.16.2
 * Query Engine version: 34ace0eb2704183d2c05b60b52fba5c43c13f303
 */
Prisma.prismaVersion = {
  client: "5.16.2",
  engine: "34ace0eb2704183d2c05b60b52fba5c43c13f303"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  tenant_user_id: 'tenant_user_id',
  tenant_id: 'tenant_id',
  email: 'email',
  name: 'name',
  cubist_user_id: 'cubist_user_id',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  tenantId: 'tenantId'
};

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  api_key: 'api_key',
  logo: 'logo',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  customer_id: 'customer_id',
  tenant_id: 'tenant_id',
  wallet_address: 'wallet_address',
  symbol: 'symbol',
  wallet_id: 'wallet_id',
  chain_type: 'chain_type',
  wallet_type: 'wallet_type',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  balance: 'balance',
  decimal_precision: 'decimal_precision',
  contract_address: 'contract_address'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  name: 'name',
  symbol: 'symbol',
  chain_type: 'chain_type',
  contract_address: 'contract_address',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at',
  decimal_precision: 'decimal_precision'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  customer_id: 'customer_id',
  callback_status: 'callback_status',
  token_id: 'token_id',
  tenant_transaction_id: 'tenant_transaction_id',
  network: 'network',
  status: 'status',
  error: 'error',
  tenant_user_id: 'tenant_user_id',
  wallet_address: 'wallet_address',
  receiver_wallet_address: 'receiver_wallet_address',
  chain_type: 'chain_type',
  amount: 'amount',
  symbol: 'symbol',
  txhash: 'txhash',
  tenant_id: 'tenant_id',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StakeTransactionScalarFieldEnum = {
  id: 'id',
  customer_id: 'customer_id',
  type: 'type',
  token_id: 'token_id',
  tenant_transaction_id: 'tenant_transaction_id',
  stake_account_pubkey: 'stake_account_pubkey',
  network: 'network',
  status: 'status',
  error: 'error',
  tenant_user_id: 'tenant_user_id',
  wallet_address: 'wallet_address',
  receiver_wallet_address: 'receiver_wallet_address',
  chain_type: 'chain_type',
  amount: 'amount',
  symbol: 'symbol',
  txhash: 'txhash',
  tenant_id: 'tenant_id',
  is_active: 'is_active',
  stake_account_id: 'stake_account_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StakeAccountScalarFieldEnum = {
  id: 'id',
  customer_id: 'customer_id',
  lockup_expiration_timestamp: 'lockup_expiration_timestamp',
  tenant_transaction_id: 'tenant_transaction_id',
  stake_account_pubkey: 'stake_account_pubkey',
  network: 'network',
  status: 'status',
  error: 'error',
  tenant_user_id: 'tenant_user_id',
  wallet_address: 'wallet_address',
  validator_node_address: 'validator_node_address',
  chain_type: 'chain_type',
  amount: 'amount',
  symbol: 'symbol',
  tenant_id: 'tenant_id',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CustomerKycScalarFieldEnum = {
  id: 'id',
  customer_id: 'customer_id',
  kyc_type: 'kyc_type',
  type: 'type',
  kyc_id: 'kyc_id',
  status: 'status',
  error: 'error',
  tenant_id: 'tenant_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.CallbackStatus = exports.$Enums.CallbackStatus = {
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  PENDING: 'PENDING'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  PENDING: 'PENDING'
};

exports.StakeType = exports.$Enums.StakeType = {
  STAKE: 'STAKE',
  UNSTAKE: 'UNSTAKE'
};

exports.StakeAccountStatus = exports.$Enums.StakeAccountStatus = {
  OPEN: 'OPEN',
  CLOSED: 'CLOSED',
  FAILED: 'FAILED',
  MERGED: 'MERGED'
};

exports.Prisma.ModelName = {
  Customer: 'Customer',
  Tenant: 'Tenant',
  Wallet: 'Wallet',
  Token: 'Token',
  Transaction: 'Transaction',
  StakeTransaction: 'StakeTransaction',
  StakeAccount: 'StakeAccount',
  CustomerKyc: 'CustomerKyc'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
